/* 1. Package e importaciones */
package Analizadores; 
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import Estructuras.Simbolo;
import Estructuras.AST;

// 2. Codigo para el parser, variables, metodos 
parser code 
{:
    //Clases, objetos, variables, lista, etc... en sintaxis java    
    //Creo una lista de tipo String llamada 'salidas', donde guardare cada uno de las salidas analizadas
    //Para el proyecto se sugiere HashMap
    public List<String> salidas = new ArrayList<String>();
    public static List<Simbolo> simbolos = new ArrayList<Simbolo>();

    public Map<String, Double> mapaDouble = new HashMap<>();    
    public Map<String, String> mapaString = new HashMap<>();

    public AST entrada = new AST("Entrada");
    public String graph = "digraph G {\n\t graph[layout = dot, rankdir = UD] \n\n"
;
:} 

// 3. Terminales 
terminal String PTCOMA,PARIZQ,PARDER,LLAVDER,LLAVIZQ,CORDER,CORIZQ,IGUAL,PUNTO,COMA, DOSPUNTOS, DOLLAR;
terminal String MAS,MENOS,POR,DIVIDIDO;
terminal String MENORQUE,MAYORQUE,EQUALS,MAYOROIGUAL,MENOROIGUAL,DISTINTO;
terminal String AND,OR,NOT;
terminal String ENTERO;
terminal String DECIMAL;
terminal String BOOLEANO;
terminal String ID;
terminal String STR,CHAR;
terminal String POTENCIA;
terminal String PR_VOID;
terminal String PR_MAIN,PR_DGLOBALES ;
terminal String PR_ENTERO;
terminal String PR_CADENA, PR_CHAR;
terminal String PR_DOBLE; 
terminal String PR_BIN; 
terminal String PR_RETORNO;
terminal String PR_IMPRI;
terminal String PR_EJECUTAR;
terminal String PR_SI, PR_SINO, PR_PARA, PR_SELECT, PR_CASO, PR_PDEFECT, PR_CORTAR, PR_CONTINUAR,PR_MIENTRAS, PR_HACER;

// 4. No Terminales
non terminal ini, entradas;
non terminal sentencias, sentencia;
non terminal metodo, funcion, ejecutar;
non terminal valor_string, valor_double;
non terminal elementos_double;
non terminal sentencia_print;
non terminal actualizacion, incremento, decremento;
non terminal sentencia_declaracion, sentencia_llamar_metodo, llamar_funcion;
non terminal sentenciaIf, sentenciasElse, sentenciaSwitch, sentenciasCase,sentenciasExtra,usoBreak;
non terminal sentenciaFor, sentenciaDoWhile, sentenciaWhile;
non terminal lista_constructor;
non terminal expresion;
non terminal tipo_dato;
non terminal lista;
non terminal elementos;
non terminal miembro;

// 5. Precedencias
precedence nonassoc POTENCIA;
precedence left POR,DIVIDIDO;
precedence left MAS,MENOS,COMA;
precedence left  MENORQUE,MAYORQUE,EQUALS,MAYOROIGUAL,MENOROIGUAL,DISTINTO;
precedence left AND,OR;
precedence right NOT; 


// 6. Producciones
start with ini; 
ini::= entradas
;

entradas ::= sentencias:a 
            {: AST sen = new AST("sentencias") ; sen.simbolos = simbolos; System.out.println("CANTIDAD SIMBOLOS: "+sen.simbolos.size());
                sen.hijos = ((List<AST>) a) ;  //System.out.println(e.hijos.size());
                entrada.hijos.add(sen);
                entrada.imprimirInfo(); graph += entrada.infoGraphviz(0)+"}"; System.out.println(graph); //funcion para graficar arbol:}
            
;

sentencias ::= sentencias:a sentencia:b {: List<AST> sentencias = (List<AST>)a ; 
                                            sentencias.add((AST)b); 
                                        RESULT=sentencias; :}
              | sentencia:a  {:List<AST> inicial = new ArrayList<AST>(); 
                        inicial.add((AST)a);
                        RESULT = inicial;
                    :}
              |sentencias:a error:b     {:RESULT= null;:}
; 

metodo ::= PR_VOID ID:a PARIZQ lista_constructor:b PARDER LLAVIZQ sentencias:c LLAVDER 
        {: simbolos.add(new Simbolo(a, "Metodo", "void","-", aleft, aright));
            AST metodo = new AST ("void "+a+"()"); AST parametros = new AST("parametros"); parametros.hijos =(List<AST>)b; metodo.hijos.add(parametros);
            AST sens = new AST("sentencias"); sens.hijos =(List<AST>)c; metodo.hijos.add(sens); 
         RESULT=metodo; :}

             |PR_VOID ID:a PARIZQ PARDER LLAVIZQ sentencias:c LLAVDER 
        {: simbolos.add(new Simbolo(a, "Metodo", "void", "-", aleft, aright));
        AST metodo = new AST ("void "+a+"()");  AST sens = new AST("sentencias"); sens.hijos =(List<AST>)c; metodo.hijos.add(sens);   
        RESULT=metodo;   :}
;

funcion ::= tipo_dato:e ID:a PARIZQ lista_constructor:b PARDER LLAVIZQ sentencias:c PR_RETORNO expresion:d PTCOMA LLAVDER 
        {: simbolos.add(new Simbolo(a, "funcion", (String)e,"-", aleft, aright));
            AST func = new AST ((String)e+" "+a); AST parametros = new AST("parametros"); parametros.hijos =(List<AST>)b; func.hijos.add(parametros);
            AST sens = new AST("sentencias"); sens.hijos =(List<AST>)c; func.hijos.add(sens); 
            AST retorno = new AST("retorno"); retorno.hijos.add((AST) d); func.hijos.add(retorno);
         RESULT=func; :}

             |tipo_dato:e ID:a PARIZQ PARDER LLAVIZQ sentencias:c PR_RETORNO expresion:d PTCOMA LLAVDER 
        {: simbolos.add(new Simbolo(a, "Metodo", (String)e, "-", aleft, aright));
            AST func = new AST ((String)e+" "+a); func.hijos.addAll((List<AST>) c) ;  
            AST retorno = new AST("retorno"); retorno.hijos.add((AST) d); func.hijos.add(retorno);
        RESULT=func;   :}
;

lista_constructor ::= lista_constructor:a COMA tipo_dato:b ID:c 
                        {: List<AST> lista = (List<AST>)a; AST construct = new AST((String)b+" "+c); lista.add(construct); 
                            RESULT=lista; :}
                    |tipo_dato:a ID:b  
                        {:List<AST> lista =  new ArrayList<AST>(); lista.add(new AST(a+" "+b)); RESULT=lista; :}
;

ejecutar ::= PR_EJECUTAR sentencia_llamar_metodo:a {: AST ejec = (AST)a; ejec.dato = "ejecutar "+ejec.dato; RESULT= ejec;:}
; 

sentencia_llamar_metodo ::= ID:a PARIZQ PARDER PTCOMA {:RESULT= new AST((String)a+"()")  ;:}
                | ID:a PARIZQ elementos:b PARDER PTCOMA {:AST metodo = new AST((String)a+"()"); metodo.hijos = (List<AST>)b ; RESULT= metodo;:}
; 

valor_double ::= DECIMAL:a {:RESULT=a;:}
                | ID:a {:RESULT=mapaDouble.get(a);:}
;

llamar_funcion ::= ID:a PARIZQ PARDER {:RESULT= new AST((String)a+"()")  ;:}
                | ID:a PARIZQ elementos:b PARDER {:AST func = new AST((String)a+"()"); func.hijos = (List<AST>)b ; RESULT= func;:}
; 

sentencia ::= sentencia_print:a     {:RESULT=a;:}
            |sentencia_declaracion:a     {:RESULT= a ;:}
            |actualizacion:a PTCOMA {:RESULT=a;:}

            | sentenciaIf:a   {:RESULT= a;:}
            | sentenciaFor:a  {:RESULT=a;:}
            | sentenciaSwitch:a  {:RESULT=a;:}
            | sentenciaWhile:a   {:RESULT=a;:}
            | sentenciaDoWhile:a   {:RESULT=a;:}
            | sentencia_llamar_metodo:a   {:RESULT=a;:}

            | metodo:a     {:RESULT= a ;:}
            | funcion:a     {:RESULT= a ;:}
            | ejecutar:a     {:RESULT=a;:}
            //| expresion:a     {:RESULT=new AST((String)a);:}
;

sentenciaIf ::= PR_SI PARIZQ expresion:a PARDER LLAVIZQ sentencias:b LLAVDER 
                    {: AST si = new AST("si"); AST exp = new AST("expresion"); exp.hijos.add((AST)a); si.hijos.add(exp) ;
                        AST sen = new AST("sentencias"); sen.hijos = (List<AST>)b; si.hijos.add(sen); 
                        RESULT=si; :}
                |PR_SI PARIZQ expresion:a PARDER LLAVIZQ sentencias:b LLAVDER sentenciasElse:c 
                    {: AST si = new AST("si"); AST exp = new AST("expresion"); exp.hijos.add((AST)a); si.hijos.add(exp) ;
                        AST sen = new AST("sentencias"); sen.hijos = (List<AST>)b; si.hijos.add(sen); 
                        List<AST> sino = (List<AST>)c; si.hijos.addAll(sino);
                        RESULT=si; :}
;

sentenciasElse ::= PR_SINO PR_SI PARIZQ expresion:a PARDER LLAVIZQ sentencias:b LLAVDER  
                    {: AST sino = new AST("sino si"); AST condicion = new AST("condicion"); condicion.hijos.add((AST) a); sino.hijos.add(sino);
                        AST sentencias = new AST("sentencias"); sentencias.hijos = ((List<AST>) b); sino.hijos.add(sentencias);
                        List<AST> listaElse =  new ArrayList<AST>(); listaElse.add(sino);
                        RESULT=listaElse; :}
                |PR_SINO PR_SI PARIZQ expresion:a PARDER LLAVIZQ sentencias:b LLAVDER  sentenciasElse:c  {: AST sino = new AST("sino si");
                        AST condicion = new AST("condicion"); condicion.hijos.add((AST) a); sino.hijos.add(sino);
                        AST sentencias = new AST("sentencias"); sentencias.hijos = ((List<AST>) b); sino.hijos.add(sentencias);
                        List<AST> listaElse =  ((List<AST>) c); listaElse.add(sino);
                        RESULT=listaElse; :}
                |PR_SINO LLAVIZQ sentencias:b LLAVDER  {: AST sino = new AST("sino"); 
                        AST sentencias = new AST("sentencias"); sentencias.hijos = ((List<AST>) b); sino.hijos.add(sentencias);
                        List<AST> listaElse =  new ArrayList<AST>(); listaElse.add(sino);
                        RESULT=listaElse; :}
;

sentenciaFor ::= PR_PARA PARIZQ sentencia_declaracion:a  expresion:b PTCOMA actualizacion:c PARDER LLAVIZQ sentencias:d LLAVDER 
            {: AST para = new AST("para"); para.hijos.add((AST) a);  AST cond = new AST("condicion"); cond.hijos.add((AST) b);  //System.out.println("para declaracion bien" );
                para.hijos.add((AST) c);
                AST sentencias =  new AST("sentencias"); sentencias.hijos = ((List<AST>) d); para.hijos.add(sentencias); 
                RESULT=para; :}
;

sentenciaSwitch ::= PR_SELECT PARIZQ ID:a PARDER LLAVIZQ sentenciasCase:b LLAVDER  
    {: AST select = new AST("selector"); select.hijos.add(new AST(a));
    AST casos = new AST("casos"); casos.hijos = (List<AST>)b; select.hijos.add(casos);
    RESULT=select; :}
;

sentenciasCase ::= PR_CASO expresion:a DOSPUNTOS sentencias:b usoBreak  sentenciasCase:c 
                    {: AST caso = new AST("caso"); caso.hijos.add((AST)a);  AST exps = new AST("sentencias"); exps.hijos = ((List<AST>) b); caso.hijos.add(exps);
                        List<AST> casos = new ArrayList<>(); casos.add(caso); System.out.println(casos.size());
                        casos.addAll((List<AST>)c);  
                        casos.add(caso);  RESULT=casos ;:}
                | PR_CASO expresion:a DOSPUNTOS sentencias:b usoBreak 
                    {: AST caso = new AST("caso"); caso.hijos.add((AST)a);  AST exps = new AST("sentencias"); exps.hijos = ((List<AST>) b); caso.hijos.add(exps);
                        List<AST> salidas = List.of(caso); System.out.println("CASO con dato: "+salidas.get(0).dato); RESULT = salidas;:}
                | PR_PDEFECT DOSPUNTOS sentencias:b usoBreak 
                    {: AST pdefect = new AST("pordefecto"); AST exps = new AST("sentencias"); exps.hijos = ((List<AST>) b); pdefect.hijos.add(exps);
                        List<AST> salidas = List.of(pdefect); System.out.println("PORDECETE con dato: "+salidas.get(0).hijos.get(0).dato); RESULT = salidas;:}
;
usoBreak ::=  PR_CORTAR PTCOMA
;

sentenciasExtra ::= ID:a IGUAL expresion:b PTCOMA sentencias {: RESULT=a+"=" + b+ ";\n"; :}
;

sentenciaWhile ::= PR_MIENTRAS PARIZQ expresion:a PARDER LLAVIZQ sentencias:b LLAVDER 
        {: AST mientras = new AST("mientras"); AST condicion = new AST("condicion"); condicion.hijos.add((AST)a); mientras.hijos.add(condicion);
            AST sentencias = new AST("sentencias"); sentencias.hijos = (List<AST>)b; mientras.hijos.add(sentencias);
        RESULT=mientras; :}
;

sentenciaDoWhile ::= PR_HACER LLAVIZQ sentencias:a LLAVDER PR_MIENTRAS PARIZQ expresion:b PARDER PTCOMA
     {: AST hacer = new AST("hacer mientras"); AST sentencias = new AST("sentencias"); sentencias.hijos = (List<AST>)a; hacer.hijos.add(sentencias);
            AST condicion = new AST("condicion"); condicion.hijos.add((AST)b); hacer.hijos.add(condicion);
        RESULT=hacer; :}
;

sentencia_print ::= PR_IMPRI PARIZQ expresion:a PARDER PTCOMA
    {:
       System.out.println("Debo retornar esto POR CONSOLA: (" + ((AST)a).dato +")" ); AST impri = new AST("imprimir()"); impri.hijos.add((AST)a);
       //Inserto en la lista de salidas de la expresión evaluada
       //salidas.add("print(" + a + ")");
       RESULT=impri;
    :}
;

sentencia_declaracion ::= tipo_dato:a ID:b IGUAL expresion:c PTCOMA 
                                {: Simbolo symb = new Simbolo(b, "Variable", (String) a, "global" , aleft, aright);symb.valor=((AST)c).getValor();
                                    System.out.println("DECLARACION: "+b+" = "+symb.valor); ;simbolos.add(symb); 
                                    AST declara = new AST("declaracion"); declara.hijos.add(new AST((String)a)); 
                                    declara.hijos.add(new AST(b)); declara.hijos.add((AST)c);
                                    RESULT=declara ;:}
                        |ID:b IGUAL expresion:c PTCOMA 
                            {: //for(Simbolo symb: simbolos){if(symb.iden==(String)b){symb.valor =((AST)c).getValor(); break;}}
                                AST set = new AST("definicion"); set.hijos.add(new AST(b)); set.hijos.add((AST)c);RESULT=set ;:}
                        |tipo_dato:a ID:b PTCOMA    
                                {: simbolos.add(new Simbolo(b, "Variable", (String) a, "global" , aleft, aright)); 
                                    AST declara = new AST("declaracion"); declara.hijos.add(new AST((String)a)); 
                                    declara.hijos.add(new AST(b)); RESULT=declara ;:}
                        |tipo_dato:a CORIZQ CORDER ID:b IGUAL lista:c PTCOMA {:RESULT= a +" [] "+b+ " = " +c ;:}
;

actualizacion ::= incremento:a {:RESULT=a;:}
                | decremento:a {:RESULT=a;:}
;

incremento ::= ID:a MAS MAS 
                {:AST incremento = new AST("incremento"); incremento.hijos.add(new AST((String)a)); 
                incremento.hijos.add(new AST("+")); incremento.hijos.add(new AST("+"));
                RESULT=incremento ;:}    
;
decremento ::= ID:a MENOS MENOS 
                {:AST decremento = new AST("decremento"); decremento.hijos.add(new AST((String)a)); 
                decremento.hijos.add(new AST("-")); decremento.hijos.add(new AST("-"));System.out.println("Decremento encontrado");
                RESULT=decremento ;:}    
;

lista ::= LLAVIZQ elementos:a LLAVDER {:RESULT="[" +a+ "]";:}
;

elementos ::= elementos:a COMA expresion:b 
                    {: List<AST> elements = (List<AST>)a ; elements.add((AST)b);  RESULT= elements;:}
            | expresion:a   
                {: List<AST> elements = new ArrayList<>(); elements.add((AST)a); RESULT = elements; :}
;

tipo_dato ::= PR_ENTERO    {:RESULT="entero";:}
            |PR_DOBLE  {:RESULT="doble";:}
            |PR_CADENA {:RESULT="cadena";:}
            |PR_BIN    {:RESULT="binario";:}
            |PR_CHAR    {:RESULT="char";:}
;

expresion ::= expresion:a MAS expresion:b {: AST mas = new AST("+"); mas.hijos.add((AST)a); mas.hijos.add((AST)b); RESULT = mas; :}
            | expresion:a POR expresion:b {: AST por = new AST("*"); por.hijos.add((AST)a); por.hijos.add((AST)b); RESULT = por; :}
            | expresion:a MENOS expresion:b {: AST men = new AST("-"); men.hijos.add((AST)a); men.hijos.add((AST)b); RESULT = men; :}
            | expresion:a POTENCIA expresion:b {: AST pot = new AST("^"); pot.hijos.add((AST)a); pot.hijos.add((AST)b); RESULT = pot; :}
            | expresion:a DIVIDIDO expresion:b {: AST div = new AST("/"); div.hijos.add((AST)a); div.hijos.add((AST)b); RESULT = div; :}

            | expresion:a MAYORQUE expresion:b {: AST may = new AST(">"); may.hijos.add((AST)a); may.hijos.add((AST)b); RESULT = may; :}
            | expresion:a MENORQUE expresion:b {: AST men = new AST("<"); men.hijos.add((AST)a); men.hijos.add((AST)b); RESULT = men; :}
            | expresion:a MAYOROIGUAL expresion:b {: AST mayi = new AST(">="); mayi.hijos.add((AST)a); mayi.hijos.add((AST)b); RESULT = mayi; :}
            | expresion:a MENOROIGUAL expresion:b {: AST meni = new AST("<="); meni.hijos.add((AST)a); meni.hijos.add((AST)b); RESULT = meni; :}
            | expresion:a EQUALS expresion:b {: AST eq = new AST("=="); eq.hijos.add((AST)a); eq.hijos.add((AST)b); RESULT = eq; :}
            | expresion:a DISTINTO expresion:b {: AST dis = new AST("!="); dis.hijos.add((AST)a); dis.hijos.add((AST)b); RESULT = dis; :}

            | expresion:a AND expresion:b {: AST and = new AST("&&"); and.hijos.add((AST)a); and.hijos.add((AST)b); RESULT = and; :}
            | expresion:a OR expresion:b {: AST or = new AST("||"); or.hijos.add((AST)a); or.hijos.add((AST)b); RESULT = or; :}
            | NOT expresion:b {: AST not = new AST("!"); not.hijos.add((AST)b); RESULT = not; :}

            | PARIZQ expresion:a PARDER {: AST par = new AST("()"); par.hijos.add(new AST((String)a));RESULT= par ;:} 
            | ENTERO:a {: RESULT= new AST(a); :}
            | DECIMAL:a {:RESULT= new AST(a);:}
            | ID:a {:RESULT= new AST(a);:}
            | STR:a {:RESULT=new AST(a);:}
            | CHAR:a {:RESULT=new AST(a);;:}
            | BOOLEANO:a {:RESULT=new AST(a);:}

            | llamar_funcion:a {:RESULT=a;:}
;

/*

| f:a {:RESULT=a;:}
f ::= ENTERO:a {:RESULT=a;:}
     |DECIMAL:a {:RESULT=a;:}
     
     |BOOLEANO:a {:RESULT=a;:}
;*/