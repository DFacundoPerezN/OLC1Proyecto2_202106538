
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import Estructuras.Simbolo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\004\004\000\002\004\003\000\002\004\004" +
    "\000\002\006\012\000\002\006\011\000\002\007\004\000" +
    "\002\015\006\000\002\015\007\000\002\012\003\000\002" +
    "\012\005\000\002\011\003\000\002\011\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\016\011\000\002\016\012\000\002\017\012\000\002\017" +
    "\013\000\002\017\006\000\002\024\024\000\002\024\024" +
    "\000\002\020\011\000\002\021\010\000\002\021\007\000" +
    "\002\021\006\000\002\023\004\000\002\022\007\000\002" +
    "\026\011\000\002\025\013\000\002\013\007\000\002\014" +
    "\007\000\002\014\006\000\002\014\005\000\002\014\011" +
    "\000\002\031\005\000\002\032\003\000\002\032\005\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\004\000\002\027" +
    "\005\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\036\040\022\044\034\047\025\050\037\051" +
    "\006\052\020\053\007\055\036\056\027\057\035\061\013" +
    "\062\023\067\012\070\026\001\002\000\046\002\uffea\003" +
    "\uffea\007\uffea\040\uffea\044\uffea\047\uffea\050\uffea\051\uffea" +
    "\052\uffea\053\uffea\055\uffea\056\uffea\057\uffea\061\uffea\062" +
    "\uffea\065\uffea\067\uffea\070\uffea\001\002\000\046\002\ufff1" +
    "\003\ufff1\007\ufff1\040\ufff1\044\ufff1\047\ufff1\050\ufff1\051" +
    "\ufff1\052\ufff1\053\ufff1\055\ufff1\056\ufff1\057\ufff1\061\ufff1" +
    "\062\ufff1\065\ufff1\067\ufff1\070\ufff1\001\002\000\006\012" +
    "\uffcd\040\uffcd\001\002\000\006\012\uffce\040\uffce\001\002" +
    "\000\042\002\uffff\003\121\040\022\044\034\047\025\050" +
    "\037\051\006\052\020\053\007\055\036\056\027\057\035" +
    "\061\013\062\023\067\012\070\026\001\002\000\046\002" +
    "\uffef\003\uffef\007\uffef\040\uffef\044\uffef\047\uffef\050\uffef" +
    "\051\uffef\052\uffef\053\uffef\055\uffef\056\uffef\057\uffef\061" +
    "\uffef\062\uffef\065\uffef\067\uffef\070\uffef\001\002\000\004" +
    "\005\274\001\002\000\004\005\241\001\002\000\004\002" +
    "\240\001\002\000\046\002\ufff2\003\ufff2\007\ufff2\040\ufff2" +
    "\044\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\055" +
    "\ufff2\056\ufff2\057\ufff2\061\ufff2\062\ufff2\065\ufff2\067\ufff2" +
    "\070\ufff2\001\002\000\046\002\uffed\003\uffed\007\uffed\040" +
    "\uffed\044\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed" +
    "\055\uffed\056\uffed\057\uffed\061\uffed\062\uffed\065\uffed\067" +
    "\uffed\070\uffed\001\002\000\046\002\uffee\003\uffee\007\uffee" +
    "\040\uffee\044\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053" +
    "\uffee\055\uffee\056\uffee\057\uffee\061\uffee\062\uffee\065\uffee" +
    "\067\uffee\070\uffee\001\002\000\006\012\uffd0\040\uffd0\001" +
    "\002\000\006\012\222\040\223\001\002\000\006\005\157" +
    "\013\217\001\002\000\004\005\175\001\002\000\046\002" +
    "\ufffd\003\ufffd\007\ufffd\040\ufffd\044\ufffd\047\ufffd\050\ufffd" +
    "\051\ufffd\052\ufffd\053\ufffd\055\ufffd\056\ufffd\057\ufffd\061" +
    "\ufffd\062\ufffd\065\ufffd\067\ufffd\070\ufffd\001\002\000\006" +
    "\012\uffd1\040\uffd1\001\002\000\004\010\165\001\002\000" +
    "\004\040\155\001\002\000\046\002\ufff0\003\ufff0\007\ufff0" +
    "\040\ufff0\044\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053" +
    "\ufff0\055\ufff0\056\ufff0\057\ufff0\061\ufff0\062\ufff0\065\ufff0" +
    "\067\ufff0\070\ufff0\001\002\000\046\002\uffe9\003\uffe9\007" +
    "\uffe9\040\uffe9\044\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9" +
    "\053\uffe9\055\uffe9\056\uffe9\057\uffe9\061\uffe9\062\uffe9\065" +
    "\uffe9\067\uffe9\070\uffe9\001\002\000\046\002\uffeb\003\uffeb" +
    "\007\uffeb\040\uffeb\044\uffeb\047\uffeb\050\uffeb\051\uffeb\052" +
    "\uffeb\053\uffeb\055\uffeb\056\uffeb\057\uffeb\061\uffeb\062\uffeb" +
    "\065\uffeb\067\uffeb\070\uffeb\001\002\000\004\002\000\001" +
    "\002\000\004\040\137\001\002\000\004\005\112\001\002" +
    "\000\004\005\041\001\002\000\006\012\uffcf\040\uffcf\001" +
    "\002\000\046\002\uffec\003\uffec\007\uffec\040\uffec\044\uffec" +
    "\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec\055\uffec\056" +
    "\uffec\057\uffec\061\uffec\062\uffec\065\uffec\067\uffec\070\uffec" +
    "\001\002\000\022\005\047\034\051\035\045\036\042\037" +
    "\043\040\050\041\044\042\052\001\002\000\046\004\uffbc" +
    "\006\uffbc\007\uffbc\015\uffbc\016\uffbc\020\uffbc\021\uffbc\022" +
    "\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc" +
    "\031\uffbc\032\uffbc\033\uffbc\043\uffbc\001\002\000\046\004" +
    "\uffb8\006\uffb8\007\uffb8\015\uffb8\016\uffb8\020\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\043\uffb8\001\002\000\046" +
    "\004\uffba\006\uffba\007\uffba\015\uffba\016\uffba\020\uffba\021" +
    "\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba" +
    "\030\uffba\031\uffba\032\uffba\033\uffba\043\uffba\001\002\000" +
    "\046\004\uffbd\006\uffbd\007\uffbd\015\uffbd\016\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\043\uffbd\001\002" +
    "\000\036\006\110\020\065\021\056\022\061\023\063\024" +
    "\062\025\064\026\067\027\060\030\055\031\066\032\054" +
    "\033\070\043\057\001\002\000\022\005\047\034\051\035" +
    "\045\036\042\037\043\040\050\041\044\042\052\001\002" +
    "\000\046\004\uffbb\006\uffbb\007\uffbb\015\uffbb\016\uffbb\020" +
    "\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\043\uffbb\001" +
    "\002\000\022\005\047\034\051\035\045\036\042\037\043" +
    "\040\050\041\044\042\052\001\002\000\046\004\uffb9\006" +
    "\uffb9\007\uffb9\015\uffb9\016\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\033\uffb9\043\uffb9\001\002\000\046\004\uffbf" +
    "\006\uffbf\007\uffbf\015\uffbf\016\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\033\uffbf\043\uffbf\001\002\000\022\005" +
    "\047\034\051\035\045\036\042\037\043\040\050\041\044" +
    "\042\052\001\002\000\022\005\047\034\051\035\045\036" +
    "\042\037\043\040\050\041\044\042\052\001\002\000\022" +
    "\005\047\034\051\035\045\036\042\037\043\040\050\041" +
    "\044\042\052\001\002\000\022\005\047\034\051\035\045" +
    "\036\042\037\043\040\050\041\044\042\052\001\002\000" +
    "\022\005\047\034\051\035\045\036\042\037\043\040\050" +
    "\041\044\042\052\001\002\000\022\005\047\034\051\035" +
    "\045\036\042\037\043\040\050\041\044\042\052\001\002" +
    "\000\022\005\047\034\051\035\045\036\042\037\043\040" +
    "\050\041\044\042\052\001\002\000\022\005\047\034\051" +
    "\035\045\036\042\037\043\040\050\041\044\042\052\001" +
    "\002\000\022\005\047\034\051\035\045\036\042\037\043" +
    "\040\050\041\044\042\052\001\002\000\022\005\047\034" +
    "\051\035\045\036\042\037\043\040\050\041\044\042\052" +
    "\001\002\000\022\005\047\034\051\035\045\036\042\037" +
    "\043\040\050\041\044\042\052\001\002\000\022\005\047" +
    "\034\051\035\045\036\042\037\043\040\050\041\044\042" +
    "\052\001\002\000\022\005\047\034\051\035\045\036\042" +
    "\037\043\040\050\041\044\042\052\001\002\000\046\004" +
    "\uffc0\006\uffc0\007\uffc0\015\uffc0\016\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030" +
    "\uffc0\031\uffc0\032\uffc0\033\uffc0\043\uffc0\001\002\000\046" +
    "\004\uffc3\006\uffc3\007\uffc3\015\uffc3\016\uffc3\020\uffc3\021" +
    "\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\032\054\033\070\043\uffc3\001\002\000" +
    "\046\004\uffc2\006\uffc2\007\uffc2\015\uffc2\016\uffc2\020\uffc2" +
    "\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027" +
    "\uffc2\030\uffc2\031\uffc2\032\054\033\070\043\uffc2\001\002" +
    "\000\046\004\uffcc\006\uffcc\007\uffcc\015\uffcc\016\uffcc\020" +
    "\uffcc\021\uffcc\022\061\023\063\024\062\025\064\026\067" +
    "\027\060\030\055\031\066\032\054\033\070\043\uffcc\001" +
    "\002\000\046\004\uffc7\006\uffc7\007\uffc7\015\uffc7\016\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\027\uffc7\030\uffc7\031\uffc7\032\054\033\070\043\uffc7" +
    "\001\002\000\046\004\uffc8\006\uffc8\007\uffc8\015\uffc8\016" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\062\025\064" +
    "\026\067\027\060\030\055\031\066\032\054\033\070\043" +
    "\uffc8\001\002\000\046\004\uffc6\006\uffc6\007\uffc6\015\uffc6" +
    "\016\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025" +
    "\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\054\033\070" +
    "\043\uffc6\001\002\000\046\004\uffcb\006\uffcb\007\uffcb\015" +
    "\uffcb\016\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\062" +
    "\025\064\026\067\027\060\030\055\031\066\032\054\033" +
    "\070\043\uffcb\001\002\000\046\004\uffc5\006\uffc5\007\uffc5" +
    "\015\uffc5\016\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\054" +
    "\033\070\043\uffc5\001\002\000\044\004\uffc9\006\uffc9\007" +
    "\uffc9\015\uffc9\016\uffc9\020\065\021\056\022\061\023\063" +
    "\024\062\025\064\026\067\027\060\030\055\031\066\032" +
    "\054\033\070\001\002\000\046\004\uffca\006\uffca\007\uffca" +
    "\015\uffca\016\uffca\020\uffca\021\uffca\022\061\023\063\024" +
    "\062\025\064\026\067\027\060\030\055\031\066\032\054" +
    "\033\070\043\uffca\001\002\000\046\004\uffc4\006\uffc4\007" +
    "\uffc4\015\uffc4\016\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032" +
    "\054\033\070\043\uffc4\001\002\000\046\004\uffc1\006\uffc1" +
    "\007\uffc1\015\uffc1\016\uffc1\020\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1" +
    "\032\uffc1\033\uffc1\043\uffc1\001\002\000\036\006\107\020" +
    "\065\021\056\022\061\023\063\024\062\025\064\026\067" +
    "\027\060\030\055\031\066\032\054\033\070\043\057\001" +
    "\002\000\046\004\uffbe\006\uffbe\007\uffbe\015\uffbe\016\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\043\uffbe" +
    "\001\002\000\004\004\111\001\002\000\046\002\uffd9\003" +
    "\uffd9\007\uffd9\040\uffd9\044\uffd9\047\uffd9\050\uffd9\051\uffd9" +
    "\052\uffd9\053\uffd9\055\uffd9\056\uffd9\057\uffd9\061\uffd9\062" +
    "\uffd9\065\uffd9\067\uffd9\070\uffd9\001\002\000\022\005\047" +
    "\034\051\035\045\036\042\037\043\040\050\041\044\042" +
    "\052\001\002\000\036\006\114\020\065\021\056\022\061" +
    "\023\063\024\062\025\064\026\067\027\060\030\055\031" +
    "\066\032\054\033\070\043\057\001\002\000\004\010\115" +
    "\001\002\000\036\040\022\044\034\047\025\050\037\051" +
    "\006\052\020\053\007\055\036\056\027\057\035\061\013" +
    "\062\023\067\012\070\026\001\002\000\042\003\121\007" +
    "\117\040\022\044\034\047\025\050\037\051\006\052\020" +
    "\053\007\055\036\056\027\057\035\061\013\062\023\067" +
    "\012\070\026\001\002\000\050\002\uffe8\003\uffe8\007\uffe8" +
    "\040\uffe8\044\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053" +
    "\uffe8\055\uffe8\056\uffe8\057\uffe8\060\123\061\uffe8\062\uffe8" +
    "\065\uffe8\067\uffe8\070\uffe8\001\002\000\046\002\ufffe\003" +
    "\ufffe\007\ufffe\040\ufffe\044\ufffe\047\ufffe\050\ufffe\051\ufffe" +
    "\052\ufffe\053\ufffe\055\ufffe\056\ufffe\057\ufffe\061\ufffe\062" +
    "\ufffe\065\ufffe\067\ufffe\070\ufffe\001\002\000\046\002\ufffc" +
    "\003\ufffc\007\ufffc\040\ufffc\044\ufffc\047\ufffc\050\ufffc\051" +
    "\ufffc\052\ufffc\053\ufffc\055\ufffc\056\ufffc\057\ufffc\061\ufffc" +
    "\062\ufffc\065\ufffc\067\ufffc\070\ufffc\001\002\000\046\002" +
    "\uffe7\003\uffe7\007\uffe7\040\uffe7\044\uffe7\047\uffe7\050\uffe7" +
    "\051\uffe7\052\uffe7\053\uffe7\055\uffe7\056\uffe7\057\uffe7\061" +
    "\uffe7\062\uffe7\065\uffe7\067\uffe7\070\uffe7\001\002\000\006" +
    "\010\124\057\125\001\002\000\036\040\022\044\034\047" +
    "\025\050\037\051\006\052\020\053\007\055\036\056\027" +
    "\057\035\061\013\062\023\067\012\070\026\001\002\000" +
    "\004\005\126\001\002\000\022\005\047\034\051\035\045" +
    "\036\042\037\043\040\050\041\044\042\052\001\002\000" +
    "\036\006\130\020\065\021\056\022\061\023\063\024\062" +
    "\025\064\026\067\027\060\030\055\031\066\032\054\033" +
    "\070\043\057\001\002\000\004\010\131\001\002\000\036" +
    "\040\022\044\034\047\025\050\037\051\006\052\020\053" +
    "\007\055\036\056\027\057\035\061\013\062\023\067\012" +
    "\070\026\001\002\000\042\003\121\007\133\040\022\044" +
    "\034\047\025\050\037\051\006\052\020\053\007\055\036" +
    "\056\027\057\035\061\013\062\023\067\012\070\026\001" +
    "\002\000\050\002\uffe6\003\uffe6\007\uffe6\040\uffe6\044\uffe6" +
    "\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\055\uffe6\056" +
    "\uffe6\057\uffe6\060\123\061\uffe6\062\uffe6\065\uffe6\067\uffe6" +
    "\070\uffe6\001\002\000\046\002\uffe5\003\uffe5\007\uffe5\040" +
    "\uffe5\044\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5" +
    "\055\uffe5\056\uffe5\057\uffe5\061\uffe5\062\uffe5\065\uffe5\067" +
    "\uffe5\070\uffe5\001\002\000\042\003\121\007\136\040\022" +
    "\044\034\047\025\050\037\051\006\052\020\053\007\055" +
    "\036\056\027\057\035\061\013\062\023\067\012\070\026" +
    "\001\002\000\046\002\uffe4\003\uffe4\007\uffe4\040\uffe4\044" +
    "\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\055\uffe4" +
    "\056\uffe4\057\uffe4\061\uffe4\062\uffe4\065\uffe4\067\uffe4\070" +
    "\uffe4\001\002\000\004\005\140\001\002\000\024\005\047" +
    "\006\143\034\051\035\045\036\042\037\043\040\050\041" +
    "\044\042\052\001\002\000\006\006\150\015\147\001\002" +
    "\000\042\006\uffd3\007\uffd3\015\uffd3\020\065\021\056\022" +
    "\061\023\063\024\062\025\064\026\067\027\060\030\055" +
    "\031\066\032\054\033\070\043\057\001\002\000\004\010" +
    "\144\001\002\000\036\040\022\044\034\047\025\050\037" +
    "\051\006\052\020\053\007\055\036\056\027\057\035\061" +
    "\013\062\023\067\012\070\026\001\002\000\042\003\121" +
    "\007\146\040\022\044\034\047\025\050\037\051\006\052" +
    "\020\053\007\055\036\056\027\057\035\061\013\062\023" +
    "\067\012\070\026\001\002\000\046\002\ufffa\003\ufffa\007" +
    "\ufffa\040\ufffa\044\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa" +
    "\053\ufffa\055\ufffa\056\ufffa\057\ufffa\061\ufffa\062\ufffa\065" +
    "\ufffa\067\ufffa\070\ufffa\001\002\000\022\005\047\034\051" +
    "\035\045\036\042\037\043\040\050\041\044\042\052\001" +
    "\002\000\004\010\151\001\002\000\036\040\022\044\034" +
    "\047\025\050\037\051\006\052\020\053\007\055\036\056" +
    "\027\057\035\061\013\062\023\067\012\070\026\001\002" +
    "\000\042\003\121\007\153\040\022\044\034\047\025\050" +
    "\037\051\006\052\020\053\007\055\036\056\027\057\035" +
    "\061\013\062\023\067\012\070\026\001\002\000\046\002" +
    "\ufffb\003\ufffb\007\ufffb\040\ufffb\044\ufffb\047\ufffb\050\ufffb" +
    "\051\ufffb\052\ufffb\053\ufffb\055\ufffb\056\ufffb\057\ufffb\061" +
    "\ufffb\062\ufffb\065\ufffb\067\ufffb\070\ufffb\001\002\000\010" +
    "\006\uffd2\007\uffd2\015\uffd2\001\002\000\004\005\157\001" +
    "\002\000\046\002\ufff9\003\ufff9\007\ufff9\040\ufff9\044\ufff9" +
    "\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\055\ufff9\056" +
    "\ufff9\057\ufff9\061\ufff9\062\ufff9\065\ufff9\067\ufff9\070\ufff9" +
    "\001\002\000\024\005\047\006\161\034\051\035\045\036" +
    "\042\037\043\040\050\041\044\042\052\001\002\000\006" +
    "\006\163\015\147\001\002\000\004\004\162\001\002\000" +
    "\046\002\ufff8\003\ufff8\007\ufff8\040\ufff8\044\ufff8\047\ufff8" +
    "\050\ufff8\051\ufff8\052\ufff8\053\ufff8\055\ufff8\056\ufff8\057" +
    "\ufff8\061\ufff8\062\ufff8\065\ufff8\067\ufff8\070\ufff8\001\002" +
    "\000\004\004\164\001\002\000\046\002\ufff7\003\ufff7\007" +
    "\ufff7\040\ufff7\044\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7" +
    "\053\ufff7\055\ufff7\056\ufff7\057\ufff7\061\ufff7\062\ufff7\065" +
    "\ufff7\067\ufff7\070\ufff7\001\002\000\036\040\022\044\034" +
    "\047\025\050\037\051\006\052\020\053\007\055\036\056" +
    "\027\057\035\061\013\062\023\067\012\070\026\001\002" +
    "\000\042\003\121\007\167\040\022\044\034\047\025\050" +
    "\037\051\006\052\020\053\007\055\036\056\027\057\035" +
    "\061\013\062\023\067\012\070\026\001\002\000\004\067" +
    "\170\001\002\000\004\005\171\001\002\000\022\005\047" +
    "\034\051\035\045\036\042\037\043\040\050\041\044\042" +
    "\052\001\002\000\036\006\173\020\065\021\056\022\061" +
    "\023\063\024\062\025\064\026\067\027\060\030\055\031" +
    "\066\032\054\033\070\043\057\001\002\000\004\004\174" +
    "\001\002\000\046\002\uffda\003\uffda\007\uffda\040\uffda\044" +
    "\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\055\uffda" +
    "\056\uffda\057\uffda\061\uffda\062\uffda\065\uffda\067\uffda\070" +
    "\uffda\001\002\000\004\040\176\001\002\000\004\006\177" +
    "\001\002\000\004\010\200\001\002\000\006\063\201\064" +
    "\203\001\002\000\022\005\047\034\051\035\045\036\042" +
    "\037\043\040\050\041\044\042\052\001\002\000\004\007" +
    "\211\001\002\000\004\016\204\001\002\000\036\040\022" +
    "\044\034\047\025\050\037\051\006\052\020\053\007\055" +
    "\036\056\027\057\035\061\013\062\023\067\012\070\026" +
    "\001\002\000\042\003\121\040\022\044\034\047\025\050" +
    "\037\051\006\052\020\053\007\055\036\056\027\057\035" +
    "\061\013\062\023\065\206\067\012\070\026\001\002\000" +
    "\004\004\210\001\002\000\004\007\uffde\001\002\000\010" +
    "\007\uffdd\063\uffdd\064\uffdd\001\002\000\046\002\uffe1\003" +
    "\uffe1\007\uffe1\040\uffe1\044\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\052\uffe1\053\uffe1\055\uffe1\056\uffe1\057\uffe1\061\uffe1\062" +
    "\uffe1\065\uffe1\067\uffe1\070\uffe1\001\002\000\036\016\213" +
    "\020\065\021\056\022\061\023\063\024\062\025\064\026" +
    "\067\027\060\030\055\031\066\032\054\033\070\043\057" +
    "\001\002\000\036\040\022\044\034\047\025\050\037\051" +
    "\006\052\020\053\007\055\036\056\027\057\035\061\013" +
    "\062\023\067\012\070\026\001\002\000\042\003\121\040" +
    "\022\044\034\047\025\050\037\051\006\052\020\053\007" +
    "\055\036\056\027\057\035\061\013\062\023\065\206\067" +
    "\012\070\026\001\002\000\010\007\uffdf\063\201\064\203" +
    "\001\002\000\004\007\uffe0\001\002\000\022\005\047\034" +
    "\051\035\045\036\042\037\043\040\050\041\044\042\052" +
    "\001\002\000\036\004\221\020\065\021\056\022\061\023" +
    "\063\024\062\025\064\026\067\027\060\030\055\031\066" +
    "\032\054\033\070\043\057\001\002\000\046\002\uffd7\003" +
    "\uffd7\007\uffd7\040\uffd7\044\uffd7\047\uffd7\050\uffd7\051\uffd7" +
    "\052\uffd7\053\uffd7\055\uffd7\056\uffd7\057\uffd7\061\uffd7\062" +
    "\uffd7\065\uffd7\067\uffd7\070\uffd7\001\002\000\004\011\230" +
    "\001\002\000\006\004\225\013\224\001\002\000\022\005" +
    "\047\034\051\035\045\036\042\037\043\040\050\041\044" +
    "\042\052\001\002\000\046\002\uffd6\003\uffd6\007\uffd6\040" +
    "\uffd6\044\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6" +
    "\055\uffd6\056\uffd6\057\uffd6\061\uffd6\062\uffd6\065\uffd6\067" +
    "\uffd6\070\uffd6\001\002\000\036\004\227\020\065\021\056" +
    "\022\061\023\063\024\062\025\064\026\067\027\060\030" +
    "\055\031\066\032\054\033\070\043\057\001\002\000\046" +
    "\002\uffd8\003\uffd8\007\uffd8\040\uffd8\044\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\052\uffd8\053\uffd8\055\uffd8\056\uffd8\057\uffd8" +
    "\061\uffd8\062\uffd8\065\uffd8\067\uffd8\070\uffd8\001\002\000" +
    "\004\040\231\001\002\000\004\013\232\001\002\000\004" +
    "\010\233\001\002\000\022\005\047\034\051\035\045\036" +
    "\042\037\043\040\050\041\044\042\052\001\002\000\004" +
    "\004\235\001\002\000\046\002\uffd5\003\uffd5\007\uffd5\040" +
    "\uffd5\044\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5" +
    "\055\uffd5\056\uffd5\057\uffd5\061\uffd5\062\uffd5\065\uffd5\067" +
    "\uffd5\070\uffd5\001\002\000\006\007\237\015\147\001\002" +
    "\000\004\004\uffd4\001\002\000\004\002\001\001\002\000" +
    "\014\047\025\050\037\051\006\052\020\053\007\001\002" +
    "\000\004\040\243\001\002\000\004\013\244\001\002\000" +
    "\022\005\047\034\051\035\045\036\042\037\043\040\050" +
    "\041\044\042\052\001\002\000\036\004\246\020\065\021" +
    "\056\022\061\023\063\024\062\025\064\026\067\027\060" +
    "\030\055\031\066\032\054\033\070\043\057\001\002\000" +
    "\004\040\247\001\002\000\006\024\251\030\250\001\002" +
    "\000\004\035\263\001\002\000\004\035\252\001\002\000" +
    "\004\004\253\001\002\000\004\040\254\001\002\000\004" +
    "\020\255\001\002\000\004\020\256\001\002\000\004\006" +
    "\257\001\002\000\004\010\260\001\002\000\036\040\022" +
    "\044\034\047\025\050\037\051\006\052\020\053\007\055" +
    "\036\056\027\057\035\061\013\062\023\067\012\070\026" +
    "\001\002\000\042\003\121\007\262\040\022\044\034\047" +
    "\025\050\037\051\006\052\020\053\007\055\036\056\027" +
    "\057\035\061\013\062\023\067\012\070\026\001\002\000" +
    "\046\002\uffe3\003\uffe3\007\uffe3\040\uffe3\044\uffe3\047\uffe3" +
    "\050\uffe3\051\uffe3\052\uffe3\053\uffe3\055\uffe3\056\uffe3\057" +
    "\uffe3\061\uffe3\062\uffe3\065\uffe3\067\uffe3\070\uffe3\001\002" +
    "\000\004\004\264\001\002\000\004\040\265\001\002\000" +
    "\004\020\266\001\002\000\004\020\267\001\002\000\004" +
    "\006\270\001\002\000\004\010\271\001\002\000\036\040" +
    "\022\044\034\047\025\050\037\051\006\052\020\053\007" +
    "\055\036\056\027\057\035\061\013\062\023\067\012\070" +
    "\026\001\002\000\042\003\121\007\273\040\022\044\034" +
    "\047\025\050\037\051\006\052\020\053\007\055\036\056" +
    "\027\057\035\061\013\062\023\067\012\070\026\001\002" +
    "\000\046\002\uffe2\003\uffe2\007\uffe2\040\uffe2\044\uffe2\047" +
    "\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\055\uffe2\056\uffe2" +
    "\057\uffe2\061\uffe2\062\uffe2\065\uffe2\067\uffe2\070\uffe2\001" +
    "\002\000\022\005\047\034\051\035\045\036\042\037\043" +
    "\040\050\041\044\042\052\001\002\000\036\006\276\020" +
    "\065\021\056\022\061\023\063\024\062\025\064\026\067" +
    "\027\060\030\055\031\066\032\054\033\070\043\057\001" +
    "\002\000\004\010\277\001\002\000\036\040\022\044\034" +
    "\047\025\050\037\051\006\052\020\053\007\055\036\056" +
    "\027\057\035\061\013\062\023\067\012\070\026\001\002" +
    "\000\042\003\121\007\301\040\022\044\034\047\025\050" +
    "\037\051\006\052\020\053\007\055\036\056\027\057\035" +
    "\061\013\062\023\067\012\070\026\001\002\000\046\002" +
    "\uffdb\003\uffdb\007\uffdb\040\uffdb\044\uffdb\047\uffdb\050\uffdb" +
    "\051\uffdb\052\uffdb\053\uffdb\055\uffdb\056\uffdb\057\uffdb\061" +
    "\uffdb\062\uffdb\065\uffdb\067\uffdb\070\uffdb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\040\002\013\003\032\004\007\005\023\006" +
    "\003\007\030\013\014\014\004\015\031\016\027\020\016" +
    "\024\010\025\037\026\015\030\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\117\006\003\007\030\013\014\014\004\015" +
    "\031\016\027\020\016\024\010\025\037\026\015\030\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\105" +
    "\001\001\000\002\001\001\000\004\027\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\104\001\001" +
    "\000\004\027\103\001\001\000\004\027\102\001\001\000" +
    "\004\027\101\001\001\000\004\027\100\001\001\000\004" +
    "\027\077\001\001\000\004\027\076\001\001\000\004\027" +
    "\075\001\001\000\004\027\074\001\001\000\004\027\073" +
    "\001\001\000\004\027\072\001\001\000\004\027\071\001" +
    "\001\000\004\027\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\115\005\023\006\003\007\030\013\014\014\004\015" +
    "\031\016\027\020\016\024\010\025\037\026\015\030\020" +
    "\001\001\000\032\005\117\006\003\007\030\013\014\014" +
    "\004\015\031\016\027\020\016\024\010\025\037\026\015" +
    "\030\020\001\001\000\004\017\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\004\134\005\023\006\003\007\030\013\014\014" +
    "\004\015\031\016\027\020\016\024\010\025\037\026\015" +
    "\030\020\001\001\000\002\001\001\000\004\027\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\131" +
    "\005\023\006\003\007\030\013\014\014\004\015\031\016" +
    "\027\020\016\024\010\025\037\026\015\030\020\001\001" +
    "\000\032\005\117\006\003\007\030\013\014\014\004\015" +
    "\031\016\027\020\016\024\010\025\037\026\015\030\020" +
    "\001\001\000\004\017\133\001\001\000\002\001\001\000" +
    "\032\005\117\006\003\007\030\013\014\014\004\015\031" +
    "\016\027\020\016\024\010\025\037\026\015\030\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\141" +
    "\032\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\144\005\023\006\003\007\030" +
    "\013\014\014\004\015\031\016\027\020\016\024\010\025" +
    "\037\026\015\030\020\001\001\000\032\005\117\006\003" +
    "\007\030\013\014\014\004\015\031\016\027\020\016\024" +
    "\010\025\037\026\015\030\020\001\001\000\002\001\001" +
    "\000\006\027\141\032\153\001\001\000\002\001\001\000" +
    "\034\004\151\005\023\006\003\007\030\013\014\014\004" +
    "\015\031\016\027\020\016\024\010\025\037\026\015\030" +
    "\020\001\001\000\032\005\117\006\003\007\030\013\014" +
    "\014\004\015\031\016\027\020\016\024\010\025\037\026" +
    "\015\030\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\141\032" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\165\005\023\006\003\007\030\013\014\014\004\015\031" +
    "\016\027\020\016\024\010\025\037\026\015\030\020\001" +
    "\001\000\032\005\117\006\003\007\030\013\014\014\004" +
    "\015\031\016\027\020\016\024\010\025\037\026\015\030" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\171\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\201\001\001\000\004\027\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\204" +
    "\005\023\006\003\007\030\013\014\014\004\015\031\016" +
    "\027\020\016\024\010\025\037\026\015\030\020\001\001" +
    "\000\034\005\117\006\003\007\030\013\014\014\004\015" +
    "\031\016\027\020\016\023\206\024\010\025\037\026\015" +
    "\030\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\213\005\023\006\003\007\030\013\014\014\004\015" +
    "\031\016\027\020\016\024\010\025\037\026\015\030\020" +
    "\001\001\000\034\005\117\006\003\007\030\013\014\014" +
    "\004\015\031\016\027\020\016\023\214\024\010\025\037" +
    "\026\015\030\020\001\001\000\004\021\215\001\001\000" +
    "\002\001\001\000\004\027\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\233\001\001\000\006\027\141\032\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\241\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\244\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\260\005\023\006" +
    "\003\007\030\013\014\014\004\015\031\016\027\020\016" +
    "\024\010\025\037\026\015\030\020\001\001\000\032\005" +
    "\117\006\003\007\030\013\014\014\004\015\031\016\027" +
    "\020\016\024\010\025\037\026\015\030\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\004\271\005\023\006\003\007\030\013\014" +
    "\014\004\015\031\016\027\020\016\024\010\025\037\026" +
    "\015\030\020\001\001\000\032\005\117\006\003\007\030" +
    "\013\014\014\004\015\031\016\027\020\016\024\010\025" +
    "\037\026\015\030\020\001\001\000\002\001\001\000\004" +
    "\027\274\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\004\277\005\023\006\003\007\030\013\014\014\004" +
    "\015\031\016\027\020\016\024\010\025\037\026\015\030" +
    "\020\001\001\000\032\005\117\006\003\007\030\013\014" +
    "\014\004\015\031\016\027\020\016\024\010\025\037\026" +
    "\015\030\020\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Clases, objetos, variables, lista, etc... en sintaxis java    
    //Creo una lista de tipo String llamada 'salidas', donde guardare cada uno de las salidas analizadas
    //Para el proyecto se sugiere HashMap
    public List<String> salidas = new ArrayList<String>();
    public List<Simbolo> simbolos = new ArrayList<Simbolo>();

    public Map<String, Double> mapaDouble = new HashMap<>();    
    public Map<String, String> mapaString = new HashMap<>();





/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= entradas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // entradas ::= sentencias 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String salida="def main() :{\n " + a + "\n}\nf__name__ == : \n\tmain()";
                RESULT=salida; 
                salidas.add(salida);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entradas",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a + "\n"+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencias ::= sentencia 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a + "\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencias ::= sentencias error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= a + "\n #Error: "+b+"\n "+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // metodo ::= PR_VOID ID PARIZQ elementos PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 simbolos.add(new Simbolo(a, "Metodo", "void","-", aleft, aright));
        RESULT="def "+ a +"("+b+"):{\n"+c+"\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // metodo ::= PR_VOID ID PARIZQ PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 simbolos.add(new Simbolo(a, "Metodo", "void", "-", aleft, aright));
        RESULT="def "+ a +"():{\n"+c+"\n}";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ejecutar ::= PR_EJECUTAR sentencia_llamar_metodo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= "ejecutar " +a + "\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejecutar",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia_llamar_metodo ::= ID PARIZQ PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT= a + "();\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_llamar_metodo",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia_llamar_metodo ::= ID PARIZQ elementos PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT= a + "("+b+") \n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_llamar_metodo",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // elementos_double ::= valor_double 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos_double",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // elementos_double ::= elementos_double COMA elementos_double 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+","+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos_double",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // valor_double ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // valor_double ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=mapaDouble.get(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= sentencia_print 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= sentencia_declaracion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= sentenciaIf 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= sentenciaFor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= sentenciaSwitch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= sentenciaWhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= sentenciaDoWhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= sentencia_llamar_metodo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= metodo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= ejecutar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentenciaIf ::= PR_SI PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="if "+ a +":{\n" + b + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentenciaIf ::= PR_SI PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER sentenciaElse 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT="if "+ a +":{\n" + b + "\n}"+c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentenciaElse ::= PR_SINO PR_SI PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="\n elif "+ a +":{\n" + b + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaElse",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentenciaElse ::= PR_SINO PR_SI PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER sentenciaElse 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT="\nelif "+ a +":{\n" + b + "\n}"+c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaElse",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentenciaElse ::= PR_SINO LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="else :{\n" + b + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaElse",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentenciaFor ::= PR_PARA PARIZQ tipo_dato ID IGUAL expresion PTCOMA ID MENORQUE ENTERO PTCOMA ID MAS MAS PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="for "+ a +" in range(1,"+b+"):{\n"+c+"\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaFor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentenciaFor ::= PR_PARA PARIZQ tipo_dato ID IGUAL expresion PTCOMA ID MENOROIGUAL ENTERO PTCOMA ID MAS MAS PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="for "+ a +" in range(1,"+b+"):{\n"+c+"\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaFor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentenciaSwitch ::= PR_SELECT PARIZQ ID PARDER LLAVIZQ sentenciasCase LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="def switch(case, "+ a +"):{\n" + "switcher = { " + b + "\n} }"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitch",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentenciasCase ::= PR_CASO expresion DOSPUNTOS sentencias usoBreak sentenciasCase 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= a+": " + b+ ", \n " + c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasCase",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentenciasCase ::= PR_CASO expresion DOSPUNTOS sentencias usoBreak 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= a+": " + b+ ", \n "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasCase",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentenciasCase ::= PR_PDEFECT DOSPUNTOS sentencias usoBreak 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="4: " + b+ ","; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasCase",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // usoBreak ::= PR_CORTAR PTCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("usoBreak",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentenciasExtra ::= ID IGUAL expresion PTCOMA sentencias 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a+"=" + b+ ";\n"+c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasExtra",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentenciaWhile ::= PR_MIENTRAS PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="while "+ a +":{\n" + b + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentenciaDoWhile ::= PR_HACER LLAVIZQ sentencias LLAVDER PR_MIENTRAS PARIZQ expresion PARDER PTCOMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT="while True:{"+ b +"if ("+a+"):{ \n break \n}"+"\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia_print ::= PR_IMPRI PARIZQ expresion PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
       System.out.println("Debo retornar esto POR CONSOLA: (" + a +");" );
       //Inserto en la lista de salidas de la expresión evaluada
       //salidas.add("print(" + a + ")");
       RESULT="print(" + a + ");";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_print",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia_declaracion ::= tipo_dato ID IGUAL expresion PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 simbolos.add(new Simbolo(b, "Variable", (String) a, "global" , aleft, aright)); RESULT=a+" "+b.toString()+" = "+c+";\n" ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_declaracion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia_declaracion ::= ID IGUAL expresion PTCOMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=b+" = "+c+";\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_declaracion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia_declaracion ::= tipo_dato ID PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=a+" "+b+";";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_declaracion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia_declaracion ::= tipo_dato CORIZQ CORDER ID IGUAL lista PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= a +" [] "+b+ " = " +c+ ";" ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_declaracion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lista ::= LLAVIZQ elementos LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="[" +a+ "]";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // elementos ::= expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // elementos ::= elementos COMA elementos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= ""+a + "," + b+"";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipo_dato ::= PR_ENTERO 
            {
              Object RESULT =null;
		RESULT="entero";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipo_dato ::= PR_DOBLE 
            {
              Object RESULT =null;
		RESULT="doble";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipo_dato ::= PR_CADENA 
            {
              Object RESULT =null;
		RESULT="cadena";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipo_dato ::= PR_BIN 
            {
              Object RESULT =null;
		RESULT="binario";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo_dato ::= PR_CHAR 
            {
              Object RESULT =null;
		RESULT="char";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= expresion MAS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " + " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= expresion POR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " * " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= expresion MENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " - " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= expresion POTENCIA expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " - " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= expresion DIVIDIDO expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " / " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= expresion MAYORQUE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " > " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= expresion MENORQUE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " < " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= expresion MAYOROIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " >= " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= expresion MENOROIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " <= " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= expresion EQUALS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " == " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= expresion DISTINTO expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " != " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= expresion AND expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " and " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= expresion OR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " or " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= NOT expresion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = " not " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="("+a+")";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= STR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= CHAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= BOOLEANO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
