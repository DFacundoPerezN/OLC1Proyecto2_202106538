
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import Estructuras.Simbolo;
import Estructuras.AST;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\004\004\000\002\004\003\000\002\004\004" +
    "\000\002\006\012\000\002\006\011\000\002\007\015\000" +
    "\002\007\014\000\002\034\006\000\002\034\004\000\002" +
    "\010\004\000\002\021\006\000\002\021\007\000\002\012" +
    "\003\000\002\012\003\000\002\022\005\000\002\022\006" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\023\011" +
    "\000\002\023\012\000\002\024\012\000\002\024\013\000" +
    "\002\024\006\000\002\031\014\000\002\025\011\000\002" +
    "\026\010\000\002\026\007\000\002\026\006\000\002\030" +
    "\004\000\002\027\007\000\002\033\011\000\002\032\013" +
    "\000\002\014\007\000\002\020\007\000\002\020\006\000" +
    "\002\020\005\000\002\020\011\000\002\015\003\000\002" +
    "\015\003\000\002\016\005\000\002\017\005\000\002\037" +
    "\005\000\002\040\005\000\002\040\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\005\000\002\035\004\000\002\035\005\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\036\040\023\044\037\047\027\050\042\051" +
    "\005\052\021\053\007\055\041\056\031\057\040\061\013" +
    "\062\024\067\012\070\030\001\002\000\050\002\uffe5\003" +
    "\uffe5\007\uffe5\040\uffe5\044\uffe5\047\uffe5\050\uffe5\051\uffe5" +
    "\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\061" +
    "\uffe5\062\uffe5\065\uffe5\067\uffe5\070\uffe5\001\002\000\006" +
    "\012\uffc4\040\uffc4\001\002\000\050\002\uffed\003\uffed\007" +
    "\uffed\040\uffed\044\uffed\047\uffed\050\uffed\051\uffed\052\uffed" +
    "\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\061\uffed\062" +
    "\uffed\065\uffed\067\uffed\070\uffed\001\002\000\006\012\uffc5" +
    "\040\uffc5\001\002\000\042\002\uffff\003\135\040\023\044" +
    "\037\047\027\050\042\051\005\052\021\053\007\055\041" +
    "\056\031\057\040\061\013\062\024\067\012\070\030\001" +
    "\002\000\050\002\uffea\003\uffea\007\uffea\040\uffea\044\uffea" +
    "\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055" +
    "\uffea\056\uffea\057\uffea\061\uffea\062\uffea\065\uffea\067\uffea" +
    "\070\uffea\001\002\000\004\005\320\001\002\000\004\005" +
    "\303\001\002\000\004\002\302\001\002\000\050\002\uffec" +
    "\003\uffec\007\uffec\040\uffec\044\uffec\047\uffec\050\uffec\051" +
    "\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec" +
    "\061\uffec\062\uffec\065\uffec\067\uffec\070\uffec\001\002\000" +
    "\050\002\uffee\003\uffee\007\uffee\040\uffee\044\uffee\047\uffee" +
    "\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056" +
    "\uffee\057\uffee\061\uffee\062\uffee\065\uffee\067\uffee\070\uffee" +
    "\001\002\000\050\002\uffe8\003\uffe8\007\uffe8\040\uffe8\044" +
    "\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8" +
    "\055\uffe8\056\uffe8\057\uffe8\061\uffe8\062\uffe8\065\uffe8\067" +
    "\uffe8\070\uffe8\001\002\000\050\002\uffe9\003\uffe9\007\uffe9" +
    "\040\uffe9\044\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053" +
    "\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\061\uffe9\062\uffe9" +
    "\065\uffe9\067\uffe9\070\uffe9\001\002\000\006\012\uffc7\040" +
    "\uffc7\001\002\000\006\012\245\040\244\001\002\000\012" +
    "\005\175\013\236\020\235\021\237\001\002\000\004\005" +
    "\213\001\002\000\050\002\ufffd\003\ufffd\007\ufffd\040\ufffd" +
    "\044\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054" +
    "\ufffd\055\ufffd\056\ufffd\057\ufffd\061\ufffd\062\ufffd\065\ufffd" +
    "\067\ufffd\070\ufffd\001\002\000\052\002\uffcf\003\uffcf\006" +
    "\uffcf\007\uffcf\040\uffcf\044\uffcf\047\uffcf\050\uffcf\051\uffcf" +
    "\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\061" +
    "\uffcf\062\uffcf\065\uffcf\067\uffcf\070\uffcf\001\002\000\006" +
    "\012\uffc8\040\uffc8\001\002\000\004\010\203\001\002\000" +
    "\004\040\173\001\002\000\050\002\uffeb\003\uffeb\007\uffeb" +
    "\040\uffeb\044\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053" +
    "\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\061\uffeb\062\uffeb" +
    "\065\uffeb\067\uffeb\070\uffeb\001\002\000\050\002\uffe3\003" +
    "\uffe3\007\uffe3\040\uffe3\044\uffe3\047\uffe3\050\uffe3\051\uffe3" +
    "\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\061" +
    "\uffe3\062\uffe3\065\uffe3\067\uffe3\070\uffe3\001\002\000\052" +
    "\002\uffce\003\uffce\006\uffce\007\uffce\040\uffce\044\uffce\047" +
    "\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce" +
    "\056\uffce\057\uffce\061\uffce\062\uffce\065\uffce\067\uffce\070" +
    "\uffce\001\002\000\050\002\uffe6\003\uffe6\007\uffe6\040\uffe6" +
    "\044\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054" +
    "\uffe6\055\uffe6\056\uffe6\057\uffe6\061\uffe6\062\uffe6\065\uffe6" +
    "\067\uffe6\070\uffe6\001\002\000\004\002\000\001\002\000" +
    "\004\040\153\001\002\000\004\005\126\001\002\000\004" +
    "\005\045\001\002\000\006\012\uffc6\040\uffc6\001\002\000" +
    "\050\002\uffe7\003\uffe7\007\uffe7\040\uffe7\044\uffe7\047\uffe7" +
    "\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056" +
    "\uffe7\057\uffe7\061\uffe7\062\uffe7\065\uffe7\067\uffe7\070\uffe7" +
    "\001\002\000\050\002\uffe4\003\uffe4\007\uffe4\040\uffe4\044" +
    "\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4" +
    "\055\uffe4\056\uffe4\057\uffe4\061\uffe4\062\uffe4\065\uffe4\067" +
    "\uffe4\070\uffe4\001\002\000\022\005\053\034\056\035\051" +
    "\036\046\037\047\040\055\041\050\042\057\001\002\000" +
    "\046\004\uffb3\006\uffb3\007\uffb3\015\uffb3\016\uffb3\020\uffb3" +
    "\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\043\uffb3\001\002" +
    "\000\046\004\uffaf\006\uffaf\007\uffaf\015\uffaf\016\uffaf\020" +
    "\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\043\uffaf\001" +
    "\002\000\046\004\uffb1\006\uffb1\007\uffb1\015\uffb1\016\uffb1" +
    "\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026" +
    "\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\043\uffb1" +
    "\001\002\000\046\004\uffb4\006\uffb4\007\uffb4\015\uffb4\016" +
    "\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4" +
    "\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\043" +
    "\uffb4\001\002\000\046\004\uffae\006\uffae\007\uffae\015\uffae" +
    "\016\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025" +
    "\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae" +
    "\043\uffae\001\002\000\022\005\053\034\056\035\051\036" +
    "\046\037\047\040\055\041\050\042\057\001\002\000\036" +
    "\006\122\020\072\021\064\022\066\023\070\024\067\025" +
    "\071\026\074\027\063\030\062\031\073\032\061\033\075" +
    "\043\065\001\002\000\050\004\uffb2\005\113\006\uffb2\007" +
    "\uffb2\015\uffb2\016\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2" +
    "\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032" +
    "\uffb2\033\uffb2\043\uffb2\001\002\000\022\005\053\034\056" +
    "\035\051\036\046\037\047\040\055\041\050\042\057\001" +
    "\002\000\046\004\uffb0\006\uffb0\007\uffb0\015\uffb0\016\uffb0" +
    "\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026" +
    "\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\043\uffb0" +
    "\001\002\000\046\004\uffb6\006\uffb6\007\uffb6\015\uffb6\016" +
    "\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\043" +
    "\uffb6\001\002\000\022\005\053\034\056\035\051\036\046" +
    "\037\047\040\055\041\050\042\057\001\002\000\022\005" +
    "\053\034\056\035\051\036\046\037\047\040\055\041\050" +
    "\042\057\001\002\000\022\005\053\034\056\035\051\036" +
    "\046\037\047\040\055\041\050\042\057\001\002\000\022" +
    "\005\053\034\056\035\051\036\046\037\047\040\055\041" +
    "\050\042\057\001\002\000\022\005\053\034\056\035\051" +
    "\036\046\037\047\040\055\041\050\042\057\001\002\000" +
    "\022\005\053\034\056\035\051\036\046\037\047\040\055" +
    "\041\050\042\057\001\002\000\022\005\053\034\056\035" +
    "\051\036\046\037\047\040\055\041\050\042\057\001\002" +
    "\000\022\005\053\034\056\035\051\036\046\037\047\040" +
    "\055\041\050\042\057\001\002\000\022\005\053\034\056" +
    "\035\051\036\046\037\047\040\055\041\050\042\057\001" +
    "\002\000\022\005\053\034\056\035\051\036\046\037\047" +
    "\040\055\041\050\042\057\001\002\000\022\005\053\034" +
    "\056\035\051\036\046\037\047\040\055\041\050\042\057" +
    "\001\002\000\022\005\053\034\056\035\051\036\046\037" +
    "\047\040\055\041\050\042\057\001\002\000\022\005\053" +
    "\034\056\035\051\036\046\037\047\040\055\041\050\042" +
    "\057\001\002\000\046\004\uffb7\006\uffb7\007\uffb7\015\uffb7" +
    "\016\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7" +
    "\043\uffb7\001\002\000\046\004\uffba\006\uffba\007\uffba\015" +
    "\uffba\016\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba" +
    "\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\061\033" +
    "\075\043\uffba\001\002\000\046\004\uffb9\006\uffb9\007\uffb9" +
    "\015\uffb9\016\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\061" +
    "\033\075\043\uffb9\001\002\000\046\004\uffc3\006\uffc3\007" +
    "\uffc3\015\uffc3\016\uffc3\020\uffc3\021\uffc3\022\066\023\070" +
    "\024\067\025\071\026\074\027\063\030\062\031\073\032" +
    "\061\033\075\043\uffc3\001\002\000\046\004\uffbe\006\uffbe" +
    "\007\uffbe\015\uffbe\016\uffbe\020\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\032\061\033\075\043\uffbe\001\002\000\046\004\uffbf\006" +
    "\uffbf\007\uffbf\015\uffbf\016\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\023\uffbf\024\067\025\071\026\074\027\063\030\062\031" +
    "\073\032\061\033\075\043\uffbf\001\002\000\046\004\uffbd" +
    "\006\uffbd\007\uffbd\015\uffbd\016\uffbd\020\uffbd\021\uffbd\022" +
    "\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd" +
    "\031\uffbd\032\061\033\075\043\uffbd\001\002\000\046\004" +
    "\uffc2\006\uffc2\007\uffc2\015\uffc2\016\uffc2\020\uffc2\021\uffc2" +
    "\022\uffc2\023\uffc2\024\067\025\071\026\074\027\063\030" +
    "\062\031\073\032\061\033\075\043\uffc2\001\002\000\044" +
    "\004\uffc0\006\uffc0\007\uffc0\015\uffc0\016\uffc0\020\072\021" +
    "\064\022\066\023\070\024\067\025\071\026\074\027\063" +
    "\030\062\031\073\032\061\033\075\001\002\000\046\004" +
    "\uffc1\006\uffc1\007\uffc1\015\uffc1\016\uffc1\020\uffc1\021\uffc1" +
    "\022\066\023\070\024\067\025\071\026\074\027\063\030" +
    "\062\031\073\032\061\033\075\043\uffc1\001\002\000\046" +
    "\004\uffbc\006\uffbc\007\uffbc\015\uffbc\016\uffbc\020\uffbc\021" +
    "\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\032\061\033\075\043\uffbc\001\002\000" +
    "\046\004\uffbb\006\uffbb\007\uffbb\015\uffbb\016\uffbb\020\uffbb" +
    "\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\031\uffbb\032\061\033\075\043\uffbb\001\002" +
    "\000\046\004\uffb8\006\uffb8\007\uffb8\015\uffb8\016\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\043\uffb8\001" +
    "\002\000\024\005\053\006\116\034\056\035\051\036\046" +
    "\037\047\040\055\041\050\042\057\001\002\000\006\006" +
    "\120\015\117\001\002\000\042\006\uffc9\007\uffc9\015\uffc9" +
    "\020\072\021\064\022\066\023\070\024\067\025\071\026" +
    "\074\027\063\030\062\031\073\032\061\033\075\043\065" +
    "\001\002\000\046\004\ufff0\006\ufff0\007\ufff0\015\ufff0\016" +
    "\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\043" +
    "\ufff0\001\002\000\022\005\053\034\056\035\051\036\046" +
    "\037\047\040\055\041\050\042\057\001\002\000\046\004" +
    "\uffef\006\uffef\007\uffef\015\uffef\016\uffef\020\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030" +
    "\uffef\031\uffef\032\uffef\033\uffef\043\uffef\001\002\000\042" +
    "\006\uffca\007\uffca\015\uffca\020\072\021\064\022\066\023" +
    "\070\024\067\025\071\026\074\027\063\030\062\031\073" +
    "\032\061\033\075\043\065\001\002\000\004\004\123\001" +
    "\002\000\050\002\uffd4\003\uffd4\007\uffd4\040\uffd4\044\uffd4" +
    "\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055" +
    "\uffd4\056\uffd4\057\uffd4\061\uffd4\062\uffd4\065\uffd4\067\uffd4" +
    "\070\uffd4\001\002\000\036\006\125\020\072\021\064\022" +
    "\066\023\070\024\067\025\071\026\074\027\063\030\062" +
    "\031\073\032\061\033\075\043\065\001\002\000\046\004" +
    "\uffb5\006\uffb5\007\uffb5\015\uffb5\016\uffb5\020\uffb5\021\uffb5" +
    "\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\033\uffb5\043\uffb5\001\002\000\022" +
    "\005\053\034\056\035\051\036\046\037\047\040\055\041" +
    "\050\042\057\001\002\000\036\006\130\020\072\021\064" +
    "\022\066\023\070\024\067\025\071\026\074\027\063\030" +
    "\062\031\073\032\061\033\075\043\065\001\002\000\004" +
    "\010\131\001\002\000\036\040\023\044\037\047\027\050" +
    "\042\051\005\052\021\053\007\055\041\056\031\057\040" +
    "\061\013\062\024\067\012\070\030\001\002\000\042\003" +
    "\135\007\133\040\023\044\037\047\027\050\042\051\005" +
    "\052\021\053\007\055\041\056\031\057\040\061\013\062" +
    "\024\067\012\070\030\001\002\000\052\002\uffe2\003\uffe2" +
    "\007\uffe2\040\uffe2\044\uffe2\047\uffe2\050\uffe2\051\uffe2\052" +
    "\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\136" +
    "\061\uffe2\062\uffe2\065\uffe2\067\uffe2\070\uffe2\001\002\000" +
    "\050\002\ufffe\003\ufffe\007\ufffe\040\ufffe\044\ufffe\047\ufffe" +
    "\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056" +
    "\ufffe\057\ufffe\061\ufffe\062\ufffe\065\ufffe\067\ufffe\070\ufffe" +
    "\001\002\000\050\002\ufffc\003\ufffc\007\ufffc\040\ufffc\044" +
    "\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc" +
    "\055\ufffc\056\ufffc\057\ufffc\061\ufffc\062\ufffc\065\ufffc\067" +
    "\ufffc\070\ufffc\001\002\000\006\010\141\057\140\001\002" +
    "\000\050\002\uffe1\003\uffe1\007\uffe1\040\uffe1\044\uffe1\047" +
    "\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1" +
    "\056\uffe1\057\uffe1\061\uffe1\062\uffe1\065\uffe1\067\uffe1\070" +
    "\uffe1\001\002\000\004\005\144\001\002\000\036\040\023" +
    "\044\037\047\027\050\042\051\005\052\021\053\007\055" +
    "\041\056\031\057\040\061\013\062\024\067\012\070\030" +
    "\001\002\000\042\003\135\007\143\040\023\044\037\047" +
    "\027\050\042\051\005\052\021\053\007\055\041\056\031" +
    "\057\040\061\013\062\024\067\012\070\030\001\002\000" +
    "\050\002\uffde\003\uffde\007\uffde\040\uffde\044\uffde\047\uffde" +
    "\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056" +
    "\uffde\057\uffde\061\uffde\062\uffde\065\uffde\067\uffde\070\uffde" +
    "\001\002\000\022\005\053\034\056\035\051\036\046\037" +
    "\047\040\055\041\050\042\057\001\002\000\036\006\146" +
    "\020\072\021\064\022\066\023\070\024\067\025\071\026" +
    "\074\027\063\030\062\031\073\032\061\033\075\043\065" +
    "\001\002\000\004\010\147\001\002\000\036\040\023\044" +
    "\037\047\027\050\042\051\005\052\021\053\007\055\041" +
    "\056\031\057\040\061\013\062\024\067\012\070\030\001" +
    "\002\000\042\003\135\007\151\040\023\044\037\047\027" +
    "\050\042\051\005\052\021\053\007\055\041\056\031\057" +
    "\040\061\013\062\024\067\012\070\030\001\002\000\052" +
    "\002\uffe0\003\uffe0\007\uffe0\040\uffe0\044\uffe0\047\uffe0\050" +
    "\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0" +
    "\057\uffe0\060\136\061\uffe0\062\uffe0\065\uffe0\067\uffe0\070" +
    "\uffe0\001\002\000\050\002\uffdf\003\uffdf\007\uffdf\040\uffdf" +
    "\044\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054" +
    "\uffdf\055\uffdf\056\uffdf\057\uffdf\061\uffdf\062\uffdf\065\uffdf" +
    "\067\uffdf\070\uffdf\001\002\000\004\005\154\001\002\000" +
    "\016\006\155\047\027\050\042\051\005\052\021\053\007" +
    "\001\002\000\004\010\170\001\002\000\004\040\167\001" +
    "\002\000\006\006\161\015\160\001\002\000\014\047\027" +
    "\050\042\051\005\052\021\053\007\001\002\000\004\010" +
    "\162\001\002\000\036\040\023\044\037\047\027\050\042" +
    "\051\005\052\021\053\007\055\041\056\031\057\040\061" +
    "\013\062\024\067\012\070\030\001\002\000\042\003\135" +
    "\007\164\040\023\044\037\047\027\050\042\051\005\052" +
    "\021\053\007\055\041\056\031\057\040\061\013\062\024" +
    "\067\012\070\030\001\002\000\050\002\ufffb\003\ufffb\007" +
    "\ufffb\040\ufffb\044\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb" +
    "\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\061\ufffb\062" +
    "\ufffb\065\ufffb\067\ufffb\070\ufffb\001\002\000\004\040\166" +
    "\001\002\000\006\006\ufff7\015\ufff7\001\002\000\006\006" +
    "\ufff6\015\ufff6\001\002\000\036\040\023\044\037\047\027" +
    "\050\042\051\005\052\021\053\007\055\041\056\031\057" +
    "\040\061\013\062\024\067\012\070\030\001\002\000\042" +
    "\003\135\007\172\040\023\044\037\047\027\050\042\051" +
    "\005\052\021\053\007\055\041\056\031\057\040\061\013" +
    "\062\024\067\012\070\030\001\002\000\050\002\ufffa\003" +
    "\ufffa\007\ufffa\040\ufffa\044\ufffa\047\ufffa\050\ufffa\051\ufffa" +
    "\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\061" +
    "\ufffa\062\ufffa\065\ufffa\067\ufffa\070\ufffa\001\002\000\004" +
    "\005\175\001\002\000\050\002\ufff5\003\ufff5\007\ufff5\040" +
    "\ufff5\044\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5" +
    "\054\ufff5\055\ufff5\056\ufff5\057\ufff5\061\ufff5\062\ufff5\065" +
    "\ufff5\067\ufff5\070\ufff5\001\002\000\024\005\053\006\177" +
    "\034\056\035\051\036\046\037\047\040\055\041\050\042" +
    "\057\001\002\000\006\006\201\015\117\001\002\000\004" +
    "\004\200\001\002\000\050\002\ufff4\003\ufff4\007\ufff4\040" +
    "\ufff4\044\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4" +
    "\054\ufff4\055\ufff4\056\ufff4\057\ufff4\061\ufff4\062\ufff4\065" +
    "\ufff4\067\ufff4\070\ufff4\001\002\000\004\004\202\001\002" +
    "\000\050\002\ufff3\003\ufff3\007\ufff3\040\ufff3\044\ufff3\047" +
    "\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3" +
    "\056\ufff3\057\ufff3\061\ufff3\062\ufff3\065\ufff3\067\ufff3\070" +
    "\ufff3\001\002\000\036\040\023\044\037\047\027\050\042" +
    "\051\005\052\021\053\007\055\041\056\031\057\040\061" +
    "\013\062\024\067\012\070\030\001\002\000\042\003\135" +
    "\007\205\040\023\044\037\047\027\050\042\051\005\052" +
    "\021\053\007\055\041\056\031\057\040\061\013\062\024" +
    "\067\012\070\030\001\002\000\004\067\206\001\002\000" +
    "\004\005\207\001\002\000\022\005\053\034\056\035\051" +
    "\036\046\037\047\040\055\041\050\042\057\001\002\000" +
    "\036\006\211\020\072\021\064\022\066\023\070\024\067" +
    "\025\071\026\074\027\063\030\062\031\073\032\061\033" +
    "\075\043\065\001\002\000\004\004\212\001\002\000\050" +
    "\002\uffd5\003\uffd5\007\uffd5\040\uffd5\044\uffd5\047\uffd5\050" +
    "\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5" +
    "\057\uffd5\061\uffd5\062\uffd5\065\uffd5\067\uffd5\070\uffd5\001" +
    "\002\000\004\040\214\001\002\000\004\006\215\001\002" +
    "\000\004\010\216\001\002\000\006\063\217\064\221\001" +
    "\002\000\022\005\053\034\056\035\051\036\046\037\047" +
    "\040\055\041\050\042\057\001\002\000\004\007\227\001" +
    "\002\000\004\016\222\001\002\000\036\040\023\044\037" +
    "\047\027\050\042\051\005\052\021\053\007\055\041\056" +
    "\031\057\040\061\013\062\024\067\012\070\030\001\002" +
    "\000\042\003\135\040\023\044\037\047\027\050\042\051" +
    "\005\052\021\053\007\055\041\056\031\057\040\061\013" +
    "\062\024\065\224\067\012\070\030\001\002\000\004\004" +
    "\226\001\002\000\004\007\uffd9\001\002\000\010\007\uffd8" +
    "\063\uffd8\064\uffd8\001\002\000\050\002\uffdc\003\uffdc\007" +
    "\uffdc\040\uffdc\044\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc" +
    "\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\061\uffdc\062" +
    "\uffdc\065\uffdc\067\uffdc\070\uffdc\001\002\000\036\016\231" +
    "\020\072\021\064\022\066\023\070\024\067\025\071\026" +
    "\074\027\063\030\062\031\073\032\061\033\075\043\065" +
    "\001\002\000\036\040\023\044\037\047\027\050\042\051" +
    "\005\052\021\053\007\055\041\056\031\057\040\061\013" +
    "\062\024\067\012\070\030\001\002\000\042\003\135\040" +
    "\023\044\037\047\027\050\042\051\005\052\021\053\007" +
    "\055\041\056\031\057\040\061\013\062\024\065\224\067" +
    "\012\070\030\001\002\000\010\007\uffda\063\217\064\221" +
    "\001\002\000\004\007\uffdb\001\002\000\004\020\243\001" +
    "\002\000\022\005\053\034\056\035\051\036\046\037\047" +
    "\040\055\041\050\042\057\001\002\000\004\021\240\001" +
    "\002\000\052\002\uffcc\003\uffcc\006\uffcc\007\uffcc\040\uffcc" +
    "\044\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054" +
    "\uffcc\055\uffcc\056\uffcc\057\uffcc\061\uffcc\062\uffcc\065\uffcc" +
    "\067\uffcc\070\uffcc\001\002\000\036\004\242\020\072\021" +
    "\064\022\066\023\070\024\067\025\071\026\074\027\063" +
    "\030\062\031\073\032\061\033\075\043\065\001\002\000" +
    "\066\002\uffd2\003\uffd2\005\uffd2\007\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\044\uffd2\047" +
    "\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2" +
    "\056\uffd2\057\uffd2\061\uffd2\062\uffd2\065\uffd2\067\uffd2\070" +
    "\uffd2\001\002\000\052\002\uffcd\003\uffcd\006\uffcd\007\uffcd" +
    "\040\uffcd\044\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053" +
    "\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\061\uffcd\062\uffcd" +
    "\065\uffcd\067\uffcd\070\uffcd\001\002\000\010\004\260\005" +
    "\256\013\257\001\002\000\004\011\246\001\002\000\004" +
    "\040\247\001\002\000\004\013\250\001\002\000\004\010" +
    "\251\001\002\000\022\005\053\034\056\035\051\036\046" +
    "\037\047\040\055\041\050\042\057\001\002\000\004\004" +
    "\253\001\002\000\066\002\uffd0\003\uffd0\005\uffd0\007\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\044\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0" +
    "\054\uffd0\055\uffd0\056\uffd0\057\uffd0\061\uffd0\062\uffd0\065" +
    "\uffd0\067\uffd0\070\uffd0\001\002\000\006\007\255\015\117" +
    "\001\002\000\004\004\uffcb\001\002\000\016\006\263\047" +
    "\027\050\042\051\005\052\021\053\007\001\002\000\022" +
    "\005\053\034\056\035\051\036\046\037\047\040\055\041" +
    "\050\042\057\001\002\000\066\002\uffd1\003\uffd1\005\uffd1" +
    "\007\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\042\uffd1\044\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1" +
    "\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\061\uffd1\062" +
    "\uffd1\065\uffd1\067\uffd1\070\uffd1\001\002\000\036\004\262" +
    "\020\072\021\064\022\066\023\070\024\067\025\071\026" +
    "\074\027\063\030\062\031\073\032\061\033\075\043\065" +
    "\001\002\000\066\002\uffd3\003\uffd3\005\uffd3\007\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3" +
    "\044\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054" +
    "\uffd3\055\uffd3\056\uffd3\057\uffd3\061\uffd3\062\uffd3\065\uffd3" +
    "\067\uffd3\070\uffd3\001\002\000\004\010\274\001\002\000" +
    "\006\006\265\015\160\001\002\000\004\010\266\001\002" +
    "\000\036\040\023\044\037\047\027\050\042\051\005\052" +
    "\021\053\007\055\041\056\031\057\040\061\013\062\024" +
    "\067\012\070\030\001\002\000\042\003\135\040\023\044" +
    "\037\047\027\050\042\051\005\052\021\053\007\054\270" +
    "\055\041\056\031\057\040\061\013\062\024\067\012\070" +
    "\030\001\002\000\022\005\053\034\056\035\051\036\046" +
    "\037\047\040\055\041\050\042\057\001\002\000\036\004" +
    "\272\020\072\021\064\022\066\023\070\024\067\025\071" +
    "\026\074\027\063\030\062\031\073\032\061\033\075\043" +
    "\065\001\002\000\004\007\273\001\002\000\050\002\ufff9" +
    "\003\ufff9\007\ufff9\040\ufff9\044\ufff9\047\ufff9\050\ufff9\051" +
    "\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9" +
    "\061\ufff9\062\ufff9\065\ufff9\067\ufff9\070\ufff9\001\002\000" +
    "\036\040\023\044\037\047\027\050\042\051\005\052\021" +
    "\053\007\055\041\056\031\057\040\061\013\062\024\067" +
    "\012\070\030\001\002\000\042\003\135\040\023\044\037" +
    "\047\027\050\042\051\005\052\021\053\007\054\276\055" +
    "\041\056\031\057\040\061\013\062\024\067\012\070\030" +
    "\001\002\000\022\005\053\034\056\035\051\036\046\037" +
    "\047\040\055\041\050\042\057\001\002\000\036\004\300" +
    "\020\072\021\064\022\066\023\070\024\067\025\071\026" +
    "\074\027\063\030\062\031\073\032\061\033\075\043\065" +
    "\001\002\000\004\007\301\001\002\000\050\002\ufff8\003" +
    "\ufff8\007\ufff8\040\ufff8\044\ufff8\047\ufff8\050\ufff8\051\ufff8" +
    "\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\061" +
    "\ufff8\062\ufff8\065\ufff8\067\ufff8\070\ufff8\001\002\000\004" +
    "\002\001\001\002\000\016\040\304\047\027\050\042\051" +
    "\005\052\021\053\007\001\002\000\004\013\236\001\002" +
    "\000\022\005\053\034\056\035\051\036\046\037\047\040" +
    "\055\041\050\042\057\001\002\000\006\012\245\040\307" +
    "\001\002\000\006\004\260\013\257\001\002\000\036\004" +
    "\311\020\072\021\064\022\066\023\070\024\067\025\071" +
    "\026\074\027\063\030\062\031\073\032\061\033\075\043" +
    "\065\001\002\000\004\040\312\001\002\000\006\020\235" +
    "\021\237\001\002\000\004\006\314\001\002\000\004\010" +
    "\315\001\002\000\036\040\023\044\037\047\027\050\042" +
    "\051\005\052\021\053\007\055\041\056\031\057\040\061" +
    "\013\062\024\067\012\070\030\001\002\000\042\003\135" +
    "\007\317\040\023\044\037\047\027\050\042\051\005\052" +
    "\021\053\007\055\041\056\031\057\040\061\013\062\024" +
    "\067\012\070\030\001\002\000\050\002\uffdd\003\uffdd\007" +
    "\uffdd\040\uffdd\044\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd" +
    "\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\061\uffdd\062" +
    "\uffdd\065\uffdd\067\uffdd\070\uffdd\001\002\000\022\005\053" +
    "\034\056\035\051\036\046\037\047\040\055\041\050\042" +
    "\057\001\002\000\036\006\322\020\072\021\064\022\066" +
    "\023\070\024\067\025\071\026\074\027\063\030\062\031" +
    "\073\032\061\033\075\043\065\001\002\000\004\010\323" +
    "\001\002\000\036\040\023\044\037\047\027\050\042\051" +
    "\005\052\021\053\007\055\041\056\031\057\040\061\013" +
    "\062\024\067\012\070\030\001\002\000\042\003\135\007" +
    "\325\040\023\044\037\047\027\050\042\051\005\052\021" +
    "\053\007\055\041\056\031\057\040\061\013\062\024\067" +
    "\012\070\030\001\002\000\050\002\uffd6\003\uffd6\007\uffd6" +
    "\040\uffd6\044\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053" +
    "\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\061\uffd6\062\uffd6" +
    "\065\uffd6\067\uffd6\070\uffd6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\050\002\013\003\035\004\007\005\024\006" +
    "\003\007\043\010\032\014\015\015\014\016\025\017\033" +
    "\020\005\021\034\023\031\025\017\031\010\032\042\033" +
    "\016\036\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\005\133\006" +
    "\003\007\043\010\032\014\015\015\014\016\025\017\033" +
    "\020\005\021\034\023\031\025\017\031\010\032\042\033" +
    "\016\036\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\051\035\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\051\035\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\051\035\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\051\035\111\001\001\000\006\022\051\035\110\001\001" +
    "\000\006\022\051\035\107\001\001\000\006\022\051\035" +
    "\106\001\001\000\006\022\051\035\105\001\001\000\006" +
    "\022\051\035\104\001\001\000\006\022\051\035\103\001" +
    "\001\000\006\022\051\035\102\001\001\000\006\022\051" +
    "\035\101\001\001\000\006\022\051\035\100\001\001\000" +
    "\006\022\051\035\077\001\001\000\006\022\051\035\076" +
    "\001\001\000\006\022\051\035\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\051\035\114\040\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\051\035\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\051\035\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\004\131\005\024\006\003\007\043\010" +
    "\032\014\015\015\014\016\025\017\033\020\005\021\034" +
    "\023\031\025\017\031\010\032\042\033\016\036\021\001" +
    "\001\000\042\005\133\006\003\007\043\010\032\014\015" +
    "\015\014\016\025\017\033\020\005\021\034\023\031\025" +
    "\017\031\010\032\042\033\016\036\021\001\001\000\004" +
    "\024\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\004\141\005\024\006\003\007\043\010\032\014\015\015" +
    "\014\016\025\017\033\020\005\021\034\023\031\025\017" +
    "\031\010\032\042\033\016\036\021\001\001\000\042\005" +
    "\133\006\003\007\043\010\032\014\015\015\014\016\025" +
    "\017\033\020\005\021\034\023\031\025\017\031\010\032" +
    "\042\033\016\036\021\001\001\000\002\001\001\000\006" +
    "\022\051\035\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\004\147\005\024\006\003\007\043\010\032" +
    "\014\015\015\014\016\025\017\033\020\005\021\034\023" +
    "\031\025\017\031\010\032\042\033\016\036\021\001\001" +
    "\000\042\005\133\006\003\007\043\010\032\014\015\015" +
    "\014\016\025\017\033\020\005\021\034\023\031\025\017" +
    "\031\010\032\042\033\016\036\021\001\001\000\004\024" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\156\036\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\164\001\001\000\002" +
    "\001\001\000\044\004\162\005\024\006\003\007\043\010" +
    "\032\014\015\015\014\016\025\017\033\020\005\021\034" +
    "\023\031\025\017\031\010\032\042\033\016\036\021\001" +
    "\001\000\042\005\133\006\003\007\043\010\032\014\015" +
    "\015\014\016\025\017\033\020\005\021\034\023\031\025" +
    "\017\031\010\032\042\033\016\036\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\004\170\005\024\006\003\007\043\010\032" +
    "\014\015\015\014\016\025\017\033\020\005\021\034\023" +
    "\031\025\017\031\010\032\042\033\016\036\021\001\001" +
    "\000\042\005\133\006\003\007\043\010\032\014\015\015" +
    "\014\016\025\017\033\020\005\021\034\023\031\025\017" +
    "\031\010\032\042\033\016\036\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\022\051" +
    "\035\114\040\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\203\005\024\006\003\007\043\010\032\014" +
    "\015\015\014\016\025\017\033\020\005\021\034\023\031" +
    "\025\017\031\010\032\042\033\016\036\021\001\001\000" +
    "\042\005\133\006\003\007\043\010\032\014\015\015\014" +
    "\016\025\017\033\020\005\021\034\023\031\025\017\031" +
    "\010\032\042\033\016\036\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\051\035\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\217\001\001\000\006\022\051\035\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\004\222\005\024\006" +
    "\003\007\043\010\032\014\015\015\014\016\025\017\033" +
    "\020\005\021\034\023\031\025\017\031\010\032\042\033" +
    "\016\036\021\001\001\000\044\005\133\006\003\007\043" +
    "\010\032\014\015\015\014\016\025\017\033\020\005\021" +
    "\034\023\031\025\017\030\224\031\010\032\042\033\016" +
    "\036\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\004\231\005\024\006\003\007\043\010\032\014\015\015" +
    "\014\016\025\017\033\020\005\021\034\023\031\025\017" +
    "\031\010\032\042\033\016\036\021\001\001\000\044\005" +
    "\133\006\003\007\043\010\032\014\015\015\014\016\025" +
    "\017\033\020\005\021\034\023\031\025\017\030\232\031" +
    "\010\032\042\033\016\036\021\001\001\000\004\026\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\051\035\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\251\001\001\000\010\022\051\035" +
    "\114\040\253\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\263\036" +
    "\155\001\001\000\006\022\051\035\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\004\266" +
    "\005\024\006\003\007\043\010\032\014\015\015\014\016" +
    "\025\017\033\020\005\021\034\023\031\025\017\031\010" +
    "\032\042\033\016\036\021\001\001\000\042\005\133\006" +
    "\003\007\043\010\032\014\015\015\014\016\025\017\033" +
    "\020\005\021\034\023\031\025\017\031\010\032\042\033" +
    "\016\036\021\001\001\000\006\022\051\035\270\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\004\274\005\024\006\003\007\043\010\032\014\015" +
    "\015\014\016\025\017\033\020\005\021\034\023\031\025" +
    "\017\031\010\032\042\033\016\036\021\001\001\000\042" +
    "\005\133\006\003\007\043\010\032\014\015\015\014\016" +
    "\025\017\033\020\005\021\034\023\031\025\017\031\010" +
    "\032\042\033\016\036\021\001\001\000\006\022\051\035" +
    "\276\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\304\036\305\001" +
    "\001\000\002\001\001\000\006\022\051\035\307\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\312\016\025\017\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\004\315\005" +
    "\024\006\003\007\043\010\032\014\015\015\014\016\025" +
    "\017\033\020\005\021\034\023\031\025\017\031\010\032" +
    "\042\033\016\036\021\001\001\000\042\005\133\006\003" +
    "\007\043\010\032\014\015\015\014\016\025\017\033\020" +
    "\005\021\034\023\031\025\017\031\010\032\042\033\016" +
    "\036\021\001\001\000\002\001\001\000\006\022\051\035" +
    "\320\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\004\323\005\024\006\003\007\043\010\032\014\015\015" +
    "\014\016\025\017\033\020\005\021\034\023\031\025\017" +
    "\031\010\032\042\033\016\036\021\001\001\000\042\005" +
    "\133\006\003\007\043\010\032\014\015\015\014\016\025" +
    "\017\033\020\005\021\034\023\031\025\017\031\010\032" +
    "\042\033\016\036\021\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Clases, objetos, variables, lista, etc... en sintaxis java    
    //Creo una lista de tipo String llamada 'salidas', donde guardare cada uno de las salidas analizadas
    //Para el proyecto se sugiere HashMap
    public List<String> salidas = new ArrayList<String>();
    public List<Simbolo> simbolos = new ArrayList<Simbolo>();

    public Map<String, Double> mapaDouble = new HashMap<>();    
    public Map<String, String> mapaString = new HashMap<>();

    public AST entrada = new AST("Entrada");
    public String graph = "digraph G {\n\t graph[layout = dot, rankdir = UD] \n\n"
;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= entradas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // entradas ::= sentencias 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST sen = new AST("sentencias") ; 
                sen.hijos = ((List<AST>) a) ;  //System.out.println(e.hijos.size());
                entrada.hijos.add(sen);
                entrada.imprimirInfo(); graph += entrada.infoGraphviz(0)+"}"; System.out.println(graph); //funcion para graficar arbol
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entradas",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<AST> sentencias = (List<AST>)a ; 
                                            sentencias.add((AST)b); 
                                        RESULT=sentencias; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencias ::= sentencia 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		List<AST> inicial = new ArrayList<AST>(); 
                        inicial.add((AST)a);
                        RESULT = inicial;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencias ::= sentencias error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // metodo ::= PR_VOID ID PARIZQ lista_constructor PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 simbolos.add(new Simbolo(a, "Metodo", "void","-", aleft, aright));
            AST metodo = new AST ("void "+a); AST parametros = new AST("parametros"); parametros.hijos =(List<AST>)b; metodo.hijos.add(parametros);
            AST sens = new AST("sentencias"); sens.hijos =(List<AST>)c; metodo.hijos.add(sens); 
         RESULT=metodo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // metodo ::= PR_VOID ID PARIZQ PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 simbolos.add(new Simbolo(a, "Metodo", "void", "-", aleft, aright));
        AST metodo = new AST ("void "+a); metodo.hijos.addAll((List<AST>) c) ;  
        RESULT=metodo;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion ::= tipo_dato ID PARIZQ lista_constructor PARDER LLAVIZQ sentencias PR_RETORNO expresion PTCOMA LLAVDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 simbolos.add(new Simbolo(a, "funcion", (String)e,"-", aleft, aright));
            AST func = new AST ((String)e+" "+a); AST parametros = new AST("parametros"); parametros.hijos =(List<AST>)b; func.hijos.add(parametros);
            AST sens = new AST("sentencias"); sens.hijos =(List<AST>)c; func.hijos.add(sens); 
            AST retorno = new AST("retorno"); retorno.hijos.add((AST) d); func.hijos.add(retorno);
         RESULT=func; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcion ::= tipo_dato ID PARIZQ PARDER LLAVIZQ sentencias PR_RETORNO expresion PTCOMA LLAVDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 simbolos.add(new Simbolo(a, "Metodo", (String)e, "-", aleft, aright));
            AST func = new AST ((String)e+" "+a); func.hijos.addAll((List<AST>) c) ;  
            AST retorno = new AST("retorno"); retorno.hijos.add((AST) d); func.hijos.add(retorno);
        RESULT=func;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_constructor ::= lista_constructor COMA tipo_dato ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<AST> lista = (List<AST>)a; AST construct = new AST((String)b+" "+c); lista.add(construct); 
                            RESULT=lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_constructor",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_constructor ::= tipo_dato ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		List<AST> lista =  new ArrayList<AST>(); lista.add(new AST(a+" "+b)); RESULT=lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_constructor",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ejecutar ::= PR_EJECUTAR sentencia_llamar_metodo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST ejec = (AST)a; ejec.dato = "ejecutar "+ejec.dato; RESULT= ejec;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejecutar",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia_llamar_metodo ::= ID PARIZQ PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT= new AST((String)a+"()")  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_llamar_metodo",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia_llamar_metodo ::= ID PARIZQ elementos PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		AST metodo = new AST((String)a+"()"); metodo.hijos = (List<AST>)b ; RESULT= metodo;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_llamar_metodo",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // valor_double ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // valor_double ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=mapaDouble.get(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // llamar_funcion ::= ID PARIZQ PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT= new AST((String)a+"()")  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamar_funcion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // llamar_funcion ::= ID PARIZQ elementos PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		AST func = new AST((String)a+"()"); func.hijos = (List<AST>)b ; RESULT= func;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamar_funcion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= sentencia_print 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= sentencia_declaracion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= a ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= actualizacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= sentenciaIf 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= sentenciaFor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= sentenciaSwitch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= sentenciaWhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= sentenciaDoWhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= sentencia_llamar_metodo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= metodo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= a ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= funcion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= a ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= ejecutar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentenciaIf ::= PR_SI PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 AST si = new AST("si"); AST exp = new AST("expresion"); exp.hijos.add((AST)a); si.hijos.add(exp) ;
                        AST sen = new AST("sentencias"); sen.hijos = (List<AST>)b; si.hijos.add(sen); 
                        RESULT=si; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentenciaIf ::= PR_SI PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER sentenciasElse 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST si = new AST("si"); AST exp = new AST("expresion"); exp.hijos.add((AST)a); si.hijos.add(exp) ;
                        AST sen = new AST("sentencias"); sen.hijos = (List<AST>)b; si.hijos.add(sen); 
                        List<AST> sino = (List<AST>)c; si.hijos.addAll(sino);
                        RESULT=si; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentenciasElse ::= PR_SINO PR_SI PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 AST sino = new AST("sino si"); AST condicion = new AST("condicion"); condicion.hijos.add((AST) a); sino.hijos.add(sino);
                        AST sentencias = new AST("sentencias"); sentencias.hijos = ((List<AST>) b); sino.hijos.add(sentencias);
                        List<AST> listaElse =  new ArrayList<AST>(); listaElse.add(sino);
                        RESULT=listaElse; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasElse",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentenciasElse ::= PR_SINO PR_SI PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER sentenciasElse 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST sino = new AST("sino si");
                        AST condicion = new AST("condicion"); condicion.hijos.add((AST) a); sino.hijos.add(sino);
                        AST sentencias = new AST("sentencias"); sentencias.hijos = ((List<AST>) b); sino.hijos.add(sentencias);
                        List<AST> listaElse =  ((List<AST>) c); listaElse.add(sino);
                        RESULT=listaElse; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasElse",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentenciasElse ::= PR_SINO LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 AST sino = new AST("sino"); 
                        AST sentencias = new AST("sentencias"); sentencias.hijos = ((List<AST>) b); sino.hijos.add(sentencias);
                        List<AST> listaElse =  new ArrayList<AST>(); listaElse.add(sino);
                        RESULT=listaElse; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasElse",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentenciaFor ::= PR_PARA PARIZQ sentencia_declaracion expresion PTCOMA actualizacion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 AST para = new AST("para"); para.hijos.add((AST) a);  AST cond = new AST("condicion"); cond.hijos.add((AST) b);  //System.out.println("para declaracion bien" );
                para.hijos.add((AST) c);
                AST sentencias =  new AST("sentencias"); sentencias.hijos = ((List<AST>) d); para.hijos.add(sentencias); 
                RESULT=para; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaFor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentenciaSwitch ::= PR_SELECT PARIZQ ID PARDER LLAVIZQ sentenciasCase LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 AST select = new AST("selector"); select.hijos.add(new AST(a));
    AST casos = new AST("casos"); casos.hijos = (List<AST>)b; select.hijos.add(casos);
    RESULT=select; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitch",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentenciasCase ::= PR_CASO expresion DOSPUNTOS sentencias usoBreak sentenciasCase 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST caso = new AST("caso"); caso.hijos.add((AST)a);  AST exps = new AST("sentencias"); exps.hijos = ((List<AST>) b); caso.hijos.add(exps);
                        List<AST> casos = new ArrayList<>(); casos.add(caso); System.out.println(casos.size());
                        casos.addAll((List<AST>)c);  
                        casos.add(caso);  RESULT=casos ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasCase",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentenciasCase ::= PR_CASO expresion DOSPUNTOS sentencias usoBreak 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 AST caso = new AST("caso"); caso.hijos.add((AST)a);  AST exps = new AST("sentencias"); exps.hijos = ((List<AST>) b); caso.hijos.add(exps);
                        List<AST> salidas = List.of(caso); System.out.println("CASO con dato: "+salidas.get(0).dato); RESULT = salidas;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasCase",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentenciasCase ::= PR_PDEFECT DOSPUNTOS sentencias usoBreak 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 AST pdefect = new AST("pordefecto"); AST exps = new AST("sentencias"); exps.hijos = ((List<AST>) b); pdefect.hijos.add(exps);
                        List<AST> salidas = List.of(pdefect); System.out.println("PORDECETE con dato: "+salidas.get(0).hijos.get(0).dato); RESULT = salidas;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasCase",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // usoBreak ::= PR_CORTAR PTCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("usoBreak",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentenciasExtra ::= ID IGUAL expresion PTCOMA sentencias 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT=a+"=" + b+ ";\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasExtra",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentenciaWhile ::= PR_MIENTRAS PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 AST mientras = new AST("mientras"); AST condicion = new AST("condicion"); condicion.hijos.add((AST)a); mientras.hijos.add(condicion);
            AST sentencias = new AST("sentencias"); sentencias.hijos = (List<AST>)b; mientras.hijos.add(sentencias);
        RESULT=mientras; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentenciaDoWhile ::= PR_HACER LLAVIZQ sentencias LLAVDER PR_MIENTRAS PARIZQ expresion PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 AST hacer = new AST("hacer mientras"); AST sentencias = new AST("sentencias"); sentencias.hijos = (List<AST>)a; hacer.hijos.add(sentencias);
            AST condicion = new AST("condicion"); condicion.hijos.add((AST)b); hacer.hijos.add(condicion);
        RESULT=hacer; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia_print ::= PR_IMPRI PARIZQ expresion PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
       System.out.println("Debo retornar esto POR CONSOLA: (" + ((AST)a).dato +")" ); AST impri = new AST("imprimir()"); impri.hijos.add((AST)a);
       //Inserto en la lista de salidas de la expresión evaluada
       //salidas.add("print(" + a + ")");
       RESULT=impri;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_print",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia_declaracion ::= tipo_dato ID IGUAL expresion PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 simbolos.add(new Simbolo(b, "Variable", (String) a, "global" , aleft, aright)); 
                                    AST declara = new AST("declaracion"); declara.hijos.add(new AST((String)a)); 
                                    declara.hijos.add(new AST(b)); declara.hijos.add((AST)c);
                                    RESULT=declara ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_declaracion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia_declaracion ::= ID IGUAL expresion PTCOMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		AST set = new AST("definicion"); set.hijos.add(new AST(b)); set.hijos.add((AST)c);RESULT=set ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_declaracion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia_declaracion ::= tipo_dato ID PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 simbolos.add(new Simbolo(b, "Variable", (String) a, "global" , aleft, aright)); 
                                    AST declara = new AST("declaracion"); declara.hijos.add(new AST((String)a)); 
                                    declara.hijos.add(new AST(b)); RESULT=declara ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_declaracion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentencia_declaracion ::= tipo_dato CORIZQ CORDER ID IGUAL lista PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= a +" [] "+b+ " = " +c ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_declaracion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // actualizacion ::= incremento 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actualizacion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // actualizacion ::= decremento 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actualizacion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // incremento ::= ID MAS MAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		AST incremento = new AST("incremento"); incremento.hijos.add(new AST((String)a)); 
                incremento.hijos.add(new AST("+")); incremento.hijos.add(new AST("+"));
                RESULT=incremento ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // decremento ::= ID MENOS MENOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		AST decremento = new AST("declaracion"); decremento.hijos.add(new AST((String)a)); 
                decremento.hijos.add(new AST("-")); decremento.hijos.add(new AST("-"));
                RESULT=decremento ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decremento",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // lista ::= LLAVIZQ elementos LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="[" +a+ "]";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // elementos ::= elementos COMA expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<AST> elements = (List<AST>)a ; elements.add((AST)b);  RESULT= elements;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // elementos ::= expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<AST> elements = new ArrayList<>(); elements.add((AST)a); RESULT = elements; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tipo_dato ::= PR_ENTERO 
            {
              Object RESULT =null;
		RESULT="entero";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tipo_dato ::= PR_DOBLE 
            {
              Object RESULT =null;
		RESULT="doble";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tipo_dato ::= PR_CADENA 
            {
              Object RESULT =null;
		RESULT="cadena";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipo_dato ::= PR_BIN 
            {
              Object RESULT =null;
		RESULT="binario";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tipo_dato ::= PR_CHAR 
            {
              Object RESULT =null;
		RESULT="char";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= expresion MAS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST mas = new AST("+"); mas.hijos.add((AST)a); mas.hijos.add((AST)b); RESULT = mas; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= expresion POR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST por = new AST("*"); por.hijos.add((AST)a); por.hijos.add((AST)b); RESULT = por; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= expresion MENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST men = new AST("-"); men.hijos.add((AST)a); men.hijos.add((AST)b); RESULT = men; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= expresion POTENCIA expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST pot = new AST("^"); pot.hijos.add((AST)a); pot.hijos.add((AST)b); RESULT = pot; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= expresion DIVIDIDO expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST div = new AST("/"); div.hijos.add((AST)a); div.hijos.add((AST)b); RESULT = div; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= expresion MAYORQUE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST may = new AST(">"); may.hijos.add((AST)a); may.hijos.add((AST)b); RESULT = may; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= expresion MENORQUE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST men = new AST("<"); men.hijos.add((AST)a); men.hijos.add((AST)b); RESULT = men; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= expresion MAYOROIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST mayi = new AST(">="); mayi.hijos.add((AST)a); mayi.hijos.add((AST)b); RESULT = mayi; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= expresion MENOROIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST meni = new AST("<="); meni.hijos.add((AST)a); meni.hijos.add((AST)b); RESULT = meni; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= expresion EQUALS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST eq = new AST("=="); eq.hijos.add((AST)a); eq.hijos.add((AST)b); RESULT = eq; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= expresion DISTINTO expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST dis = new AST("!="); dis.hijos.add((AST)a); dis.hijos.add((AST)b); RESULT = dis; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= expresion AND expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST and = new AST("&&"); and.hijos.add((AST)a); and.hijos.add((AST)b); RESULT = and; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= expresion OR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST or = new AST("||"); or.hijos.add((AST)a); or.hijos.add((AST)b); RESULT = or; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= NOT expresion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST not = new AST("!"); not.hijos.add((AST)b); RESULT = not; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new AST("("+a+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new AST(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new AST(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new AST(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= STR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new AST(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= CHAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new AST(a);;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= BOOLEANO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new AST(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= llamar_funcion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
