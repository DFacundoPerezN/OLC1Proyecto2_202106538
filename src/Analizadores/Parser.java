
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import Estructuras.Simbolo;
import Estructuras.AST;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\004\004\000\002\004\003\000\002\004\004" +
    "\000\002\006\012\000\002\006\011\000\002\032\006\000" +
    "\002\032\004\000\002\007\004\000\002\020\006\000\002" +
    "\020\007\000\002\012\003\000\002\012\005\000\002\011" +
    "\003\000\002\011\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\021" +
    "\011\000\002\021\012\000\002\022\012\000\002\022\013" +
    "\000\002\022\006\000\002\027\014\000\002\023\011\000" +
    "\002\024\010\000\002\024\007\000\002\024\006\000\002" +
    "\026\004\000\002\025\007\000\002\031\011\000\002\030" +
    "\013\000\002\013\007\000\002\017\007\000\002\017\006" +
    "\000\002\017\005\000\002\017\011\000\002\014\003\000" +
    "\002\014\003\000\002\015\005\000\002\016\005\000\002" +
    "\035\005\000\002\036\003\000\002\036\005\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\004\000\002\033\005\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\036\040\023\044\037\047\027\050\042\051" +
    "\006\052\021\053\007\055\041\056\031\057\040\061\013" +
    "\062\024\067\012\070\030\001\002\000\046\002\uffe7\003" +
    "\uffe7\007\uffe7\040\uffe7\044\uffe7\047\uffe7\050\uffe7\051\uffe7" +
    "\052\uffe7\053\uffe7\055\uffe7\056\uffe7\057\uffe7\061\uffe7\062" +
    "\uffe7\065\uffe7\067\uffe7\070\uffe7\001\002\000\046\002\uffef" +
    "\003\uffef\007\uffef\040\uffef\044\uffef\047\uffef\050\uffef\051" +
    "\uffef\052\uffef\053\uffef\055\uffef\056\uffef\057\uffef\061\uffef" +
    "\062\uffef\065\uffef\067\uffef\070\uffef\001\002\000\006\012" +
    "\uffc7\040\uffc7\001\002\000\006\012\uffc8\040\uffc8\001\002" +
    "\000\042\002\uffff\003\124\040\023\044\037\047\027\050" +
    "\042\051\006\052\021\053\007\055\041\056\031\057\040" +
    "\061\013\062\024\067\012\070\030\001\002\000\046\002" +
    "\uffec\003\uffec\007\uffec\040\uffec\044\uffec\047\uffec\050\uffec" +
    "\051\uffec\052\uffec\053\uffec\055\uffec\056\uffec\057\uffec\061" +
    "\uffec\062\uffec\065\uffec\067\uffec\070\uffec\001\002\000\004" +
    "\005\270\001\002\000\004\005\255\001\002\000\004\002" +
    "\254\001\002\000\046\002\ufff0\003\ufff0\007\ufff0\040\ufff0" +
    "\044\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\055" +
    "\ufff0\056\ufff0\057\ufff0\061\ufff0\062\ufff0\065\ufff0\067\ufff0" +
    "\070\ufff0\001\002\000\046\002\uffee\003\uffee\007\uffee\040" +
    "\uffee\044\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee" +
    "\055\uffee\056\uffee\057\uffee\061\uffee\062\uffee\065\uffee\067" +
    "\uffee\070\uffee\001\002\000\046\002\uffeb\003\uffeb\007\uffeb" +
    "\040\uffeb\044\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053" +
    "\uffeb\055\uffeb\056\uffeb\057\uffeb\061\uffeb\062\uffeb\065\uffeb" +
    "\067\uffeb\070\uffeb\001\002\000\046\002\uffea\003\uffea\007" +
    "\uffea\040\uffea\044\uffea\047\uffea\050\uffea\051\uffea\052\uffea" +
    "\053\uffea\055\uffea\056\uffea\057\uffea\061\uffea\062\uffea\065" +
    "\uffea\067\uffea\070\uffea\001\002\000\006\012\uffca\040\uffca" +
    "\001\002\000\006\012\237\040\236\001\002\000\012\005" +
    "\164\013\230\020\227\021\231\001\002\000\004\005\205" +
    "\001\002\000\046\002\ufffd\003\ufffd\007\ufffd\040\ufffd\044" +
    "\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\055\ufffd" +
    "\056\ufffd\057\ufffd\061\ufffd\062\ufffd\065\ufffd\067\ufffd\070" +
    "\ufffd\001\002\000\050\002\uffd2\003\uffd2\006\uffd2\007\uffd2" +
    "\040\uffd2\044\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053" +
    "\uffd2\055\uffd2\056\uffd2\057\uffd2\061\uffd2\062\uffd2\065\uffd2" +
    "\067\uffd2\070\uffd2\001\002\000\006\012\uffcb\040\uffcb\001" +
    "\002\000\004\010\175\001\002\000\004\040\162\001\002" +
    "\000\046\002\uffe6\003\uffe6\007\uffe6\040\uffe6\044\uffe6\047" +
    "\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\055\uffe6\056\uffe6" +
    "\057\uffe6\061\uffe6\062\uffe6\065\uffe6\067\uffe6\070\uffe6\001" +
    "\002\000\050\002\uffd1\003\uffd1\006\uffd1\007\uffd1\040\uffd1" +
    "\044\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\055" +
    "\uffd1\056\uffd1\057\uffd1\061\uffd1\062\uffd1\065\uffd1\067\uffd1" +
    "\070\uffd1\001\002\000\046\002\uffed\003\uffed\007\uffed\040" +
    "\uffed\044\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed" +
    "\055\uffed\056\uffed\057\uffed\061\uffed\062\uffed\065\uffed\067" +
    "\uffed\070\uffed\001\002\000\046\002\uffe8\003\uffe8\007\uffe8" +
    "\040\uffe8\044\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053" +
    "\uffe8\055\uffe8\056\uffe8\057\uffe8\061\uffe8\062\uffe8\065\uffe8" +
    "\067\uffe8\070\uffe8\001\002\000\004\002\000\001\002\000" +
    "\004\040\142\001\002\000\004\005\115\001\002\000\004" +
    "\005\044\001\002\000\006\012\uffc9\040\uffc9\001\002\000" +
    "\046\002\uffe9\003\uffe9\007\uffe9\040\uffe9\044\uffe9\047\uffe9" +
    "\050\uffe9\051\uffe9\052\uffe9\053\uffe9\055\uffe9\056\uffe9\057" +
    "\uffe9\061\uffe9\062\uffe9\065\uffe9\067\uffe9\070\uffe9\001\002" +
    "\000\022\005\052\034\054\035\050\036\045\037\046\040" +
    "\053\041\047\042\055\001\002\000\046\004\uffb6\006\uffb6" +
    "\007\uffb6\015\uffb6\016\uffb6\020\uffb6\021\uffb6\022\uffb6\023" +
    "\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6" +
    "\032\uffb6\033\uffb6\043\uffb6\001\002\000\046\004\uffb2\006" +
    "\uffb2\007\uffb2\015\uffb2\016\uffb2\020\uffb2\021\uffb2\022\uffb2" +
    "\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\043\uffb2\001\002\000\046\004\uffb4" +
    "\006\uffb4\007\uffb4\015\uffb4\016\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4" +
    "\031\uffb4\032\uffb4\033\uffb4\043\uffb4\001\002\000\046\004" +
    "\uffb7\006\uffb7\007\uffb7\015\uffb7\016\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030" +
    "\uffb7\031\uffb7\032\uffb7\033\uffb7\043\uffb7\001\002\000\036" +
    "\006\113\020\070\021\062\022\064\023\066\024\065\025" +
    "\067\026\072\027\061\030\060\031\071\032\057\033\073" +
    "\043\063\001\002\000\022\005\052\034\054\035\050\036" +
    "\045\037\046\040\053\041\047\042\055\001\002\000\046" +
    "\004\uffb5\006\uffb5\007\uffb5\015\uffb5\016\uffb5\020\uffb5\021" +
    "\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5" +
    "\030\uffb5\031\uffb5\032\uffb5\033\uffb5\043\uffb5\001\002\000" +
    "\022\005\052\034\054\035\050\036\045\037\046\040\053" +
    "\041\047\042\055\001\002\000\046\004\uffb3\006\uffb3\007" +
    "\uffb3\015\uffb3\016\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032" +
    "\uffb3\033\uffb3\043\uffb3\001\002\000\046\004\uffb9\006\uffb9" +
    "\007\uffb9\015\uffb9\016\uffb9\020\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\032\uffb9\033\uffb9\043\uffb9\001\002\000\022\005\052\034" +
    "\054\035\050\036\045\037\046\040\053\041\047\042\055" +
    "\001\002\000\022\005\052\034\054\035\050\036\045\037" +
    "\046\040\053\041\047\042\055\001\002\000\022\005\052" +
    "\034\054\035\050\036\045\037\046\040\053\041\047\042" +
    "\055\001\002\000\022\005\052\034\054\035\050\036\045" +
    "\037\046\040\053\041\047\042\055\001\002\000\022\005" +
    "\052\034\054\035\050\036\045\037\046\040\053\041\047" +
    "\042\055\001\002\000\022\005\052\034\054\035\050\036" +
    "\045\037\046\040\053\041\047\042\055\001\002\000\022" +
    "\005\052\034\054\035\050\036\045\037\046\040\053\041" +
    "\047\042\055\001\002\000\022\005\052\034\054\035\050" +
    "\036\045\037\046\040\053\041\047\042\055\001\002\000" +
    "\022\005\052\034\054\035\050\036\045\037\046\040\053" +
    "\041\047\042\055\001\002\000\022\005\052\034\054\035" +
    "\050\036\045\037\046\040\053\041\047\042\055\001\002" +
    "\000\022\005\052\034\054\035\050\036\045\037\046\040" +
    "\053\041\047\042\055\001\002\000\022\005\052\034\054" +
    "\035\050\036\045\037\046\040\053\041\047\042\055\001" +
    "\002\000\022\005\052\034\054\035\050\036\045\037\046" +
    "\040\053\041\047\042\055\001\002\000\046\004\uffba\006" +
    "\uffba\007\uffba\015\uffba\016\uffba\020\uffba\021\uffba\022\uffba" +
    "\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031" +
    "\uffba\032\uffba\033\uffba\043\uffba\001\002\000\046\004\uffbd" +
    "\006\uffbd\007\uffbd\015\uffbd\016\uffbd\020\uffbd\021\uffbd\022" +
    "\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd" +
    "\031\uffbd\032\057\033\073\043\uffbd\001\002\000\046\004" +
    "\uffbc\006\uffbc\007\uffbc\015\uffbc\016\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030" +
    "\uffbc\031\uffbc\032\057\033\073\043\uffbc\001\002\000\046" +
    "\004\uffc6\006\uffc6\007\uffc6\015\uffc6\016\uffc6\020\uffc6\021" +
    "\uffc6\022\064\023\066\024\065\025\067\026\072\027\061" +
    "\030\060\031\071\032\057\033\073\043\uffc6\001\002\000" +
    "\046\004\uffc1\006\uffc1\007\uffc1\015\uffc1\016\uffc1\020\uffc1" +
    "\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027" +
    "\uffc1\030\uffc1\031\uffc1\032\057\033\073\043\uffc1\001\002" +
    "\000\046\004\uffc2\006\uffc2\007\uffc2\015\uffc2\016\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\024\065\025\067\026\072" +
    "\027\061\030\060\031\071\032\057\033\073\043\uffc2\001" +
    "\002\000\046\004\uffc0\006\uffc0\007\uffc0\015\uffc0\016\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\032\057\033\073\043\uffc0" +
    "\001\002\000\046\004\uffc5\006\uffc5\007\uffc5\015\uffc5\016" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\065\025\067" +
    "\026\072\027\061\030\060\031\071\032\057\033\073\043" +
    "\uffc5\001\002\000\044\004\uffc3\006\uffc3\007\uffc3\015\uffc3" +
    "\016\uffc3\020\070\021\062\022\064\023\066\024\065\025" +
    "\067\026\072\027\061\030\060\031\071\032\057\033\073" +
    "\001\002\000\046\004\uffc4\006\uffc4\007\uffc4\015\uffc4\016" +
    "\uffc4\020\uffc4\021\uffc4\022\064\023\066\024\065\025\067" +
    "\026\072\027\061\030\060\031\071\032\057\033\073\043" +
    "\uffc4\001\002\000\046\004\uffbf\006\uffbf\007\uffbf\015\uffbf" +
    "\016\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\057\033\073" +
    "\043\uffbf\001\002\000\046\004\uffbe\006\uffbe\007\uffbe\015" +
    "\uffbe\016\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\057\033" +
    "\073\043\uffbe\001\002\000\046\004\uffbb\006\uffbb\007\uffbb" +
    "\015\uffbb\016\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb" +
    "\033\uffbb\043\uffbb\001\002\000\036\006\112\020\070\021" +
    "\062\022\064\023\066\024\065\025\067\026\072\027\061" +
    "\030\060\031\071\032\057\033\073\043\063\001\002\000" +
    "\046\004\uffb8\006\uffb8\007\uffb8\015\uffb8\016\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\043\uffb8\001\002" +
    "\000\004\004\114\001\002\000\046\002\uffd7\003\uffd7\007" +
    "\uffd7\040\uffd7\044\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7" +
    "\053\uffd7\055\uffd7\056\uffd7\057\uffd7\061\uffd7\062\uffd7\065" +
    "\uffd7\067\uffd7\070\uffd7\001\002\000\022\005\052\034\054" +
    "\035\050\036\045\037\046\040\053\041\047\042\055\001" +
    "\002\000\036\006\117\020\070\021\062\022\064\023\066" +
    "\024\065\025\067\026\072\027\061\030\060\031\071\032" +
    "\057\033\073\043\063\001\002\000\004\010\120\001\002" +
    "\000\036\040\023\044\037\047\027\050\042\051\006\052" +
    "\021\053\007\055\041\056\031\057\040\061\013\062\024" +
    "\067\012\070\030\001\002\000\042\003\124\007\122\040" +
    "\023\044\037\047\027\050\042\051\006\052\021\053\007" +
    "\055\041\056\031\057\040\061\013\062\024\067\012\070" +
    "\030\001\002\000\050\002\uffe5\003\uffe5\007\uffe5\040\uffe5" +
    "\044\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\055" +
    "\uffe5\056\uffe5\057\uffe5\060\126\061\uffe5\062\uffe5\065\uffe5" +
    "\067\uffe5\070\uffe5\001\002\000\046\002\ufffe\003\ufffe\007" +
    "\ufffe\040\ufffe\044\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe" +
    "\053\ufffe\055\ufffe\056\ufffe\057\ufffe\061\ufffe\062\ufffe\065" +
    "\ufffe\067\ufffe\070\ufffe\001\002\000\046\002\ufffc\003\ufffc" +
    "\007\ufffc\040\ufffc\044\ufffc\047\ufffc\050\ufffc\051\ufffc\052" +
    "\ufffc\053\ufffc\055\ufffc\056\ufffc\057\ufffc\061\ufffc\062\ufffc" +
    "\065\ufffc\067\ufffc\070\ufffc\001\002\000\046\002\uffe4\003" +
    "\uffe4\007\uffe4\040\uffe4\044\uffe4\047\uffe4\050\uffe4\051\uffe4" +
    "\052\uffe4\053\uffe4\055\uffe4\056\uffe4\057\uffe4\061\uffe4\062" +
    "\uffe4\065\uffe4\067\uffe4\070\uffe4\001\002\000\006\010\130" +
    "\057\127\001\002\000\004\005\133\001\002\000\036\040" +
    "\023\044\037\047\027\050\042\051\006\052\021\053\007" +
    "\055\041\056\031\057\040\061\013\062\024\067\012\070" +
    "\030\001\002\000\042\003\124\007\132\040\023\044\037" +
    "\047\027\050\042\051\006\052\021\053\007\055\041\056" +
    "\031\057\040\061\013\062\024\067\012\070\030\001\002" +
    "\000\046\002\uffe1\003\uffe1\007\uffe1\040\uffe1\044\uffe1\047" +
    "\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\055\uffe1\056\uffe1" +
    "\057\uffe1\061\uffe1\062\uffe1\065\uffe1\067\uffe1\070\uffe1\001" +
    "\002\000\022\005\052\034\054\035\050\036\045\037\046" +
    "\040\053\041\047\042\055\001\002\000\036\006\135\020" +
    "\070\021\062\022\064\023\066\024\065\025\067\026\072" +
    "\027\061\030\060\031\071\032\057\033\073\043\063\001" +
    "\002\000\004\010\136\001\002\000\036\040\023\044\037" +
    "\047\027\050\042\051\006\052\021\053\007\055\041\056" +
    "\031\057\040\061\013\062\024\067\012\070\030\001\002" +
    "\000\042\003\124\007\140\040\023\044\037\047\027\050" +
    "\042\051\006\052\021\053\007\055\041\056\031\057\040" +
    "\061\013\062\024\067\012\070\030\001\002\000\050\002" +
    "\uffe3\003\uffe3\007\uffe3\040\uffe3\044\uffe3\047\uffe3\050\uffe3" +
    "\051\uffe3\052\uffe3\053\uffe3\055\uffe3\056\uffe3\057\uffe3\060" +
    "\126\061\uffe3\062\uffe3\065\uffe3\067\uffe3\070\uffe3\001\002" +
    "\000\046\002\uffe2\003\uffe2\007\uffe2\040\uffe2\044\uffe2\047" +
    "\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\055\uffe2\056\uffe2" +
    "\057\uffe2\061\uffe2\062\uffe2\065\uffe2\067\uffe2\070\uffe2\001" +
    "\002\000\004\005\143\001\002\000\016\006\145\047\027" +
    "\050\042\051\006\052\021\053\007\001\002\000\004\040" +
    "\161\001\002\000\004\010\156\001\002\000\006\006\150" +
    "\015\147\001\002\000\014\047\027\050\042\051\006\052" +
    "\021\053\007\001\002\000\004\010\151\001\002\000\036" +
    "\040\023\044\037\047\027\050\042\051\006\052\021\053" +
    "\007\055\041\056\031\057\040\061\013\062\024\067\012" +
    "\070\030\001\002\000\042\003\124\007\153\040\023\044" +
    "\037\047\027\050\042\051\006\052\021\053\007\055\041" +
    "\056\031\057\040\061\013\062\024\067\012\070\030\001" +
    "\002\000\046\002\ufffb\003\ufffb\007\ufffb\040\ufffb\044\ufffb" +
    "\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\055\ufffb\056" +
    "\ufffb\057\ufffb\061\ufffb\062\ufffb\065\ufffb\067\ufffb\070\ufffb" +
    "\001\002\000\004\040\155\001\002\000\006\006\ufff9\015" +
    "\ufff9\001\002\000\036\040\023\044\037\047\027\050\042" +
    "\051\006\052\021\053\007\055\041\056\031\057\040\061" +
    "\013\062\024\067\012\070\030\001\002\000\042\003\124" +
    "\007\160\040\023\044\037\047\027\050\042\051\006\052" +
    "\021\053\007\055\041\056\031\057\040\061\013\062\024" +
    "\067\012\070\030\001\002\000\046\002\ufffa\003\ufffa\007" +
    "\ufffa\040\ufffa\044\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa" +
    "\053\ufffa\055\ufffa\056\ufffa\057\ufffa\061\ufffa\062\ufffa\065" +
    "\ufffa\067\ufffa\070\ufffa\001\002\000\006\006\ufff8\015\ufff8" +
    "\001\002\000\004\005\164\001\002\000\046\002\ufff7\003" +
    "\ufff7\007\ufff7\040\ufff7\044\ufff7\047\ufff7\050\ufff7\051\ufff7" +
    "\052\ufff7\053\ufff7\055\ufff7\056\ufff7\057\ufff7\061\ufff7\062" +
    "\ufff7\065\ufff7\067\ufff7\070\ufff7\001\002\000\024\005\052" +
    "\006\167\034\054\035\050\036\045\037\046\040\053\041" +
    "\047\042\055\001\002\000\006\006\172\015\171\001\002" +
    "\000\042\006\uffcd\007\uffcd\015\uffcd\020\070\021\062\022" +
    "\064\023\066\024\065\025\067\026\072\027\061\030\060" +
    "\031\071\032\057\033\073\043\063\001\002\000\004\004" +
    "\170\001\002\000\046\002\ufff6\003\ufff6\007\ufff6\040\ufff6" +
    "\044\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\055" +
    "\ufff6\056\ufff6\057\ufff6\061\ufff6\062\ufff6\065\ufff6\067\ufff6" +
    "\070\ufff6\001\002\000\022\005\052\034\054\035\050\036" +
    "\045\037\046\040\053\041\047\042\055\001\002\000\004" +
    "\004\173\001\002\000\046\002\ufff5\003\ufff5\007\ufff5\040" +
    "\ufff5\044\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5" +
    "\055\ufff5\056\ufff5\057\ufff5\061\ufff5\062\ufff5\065\ufff5\067" +
    "\ufff5\070\ufff5\001\002\000\010\006\uffcc\007\uffcc\015\uffcc" +
    "\001\002\000\036\040\023\044\037\047\027\050\042\051" +
    "\006\052\021\053\007\055\041\056\031\057\040\061\013" +
    "\062\024\067\012\070\030\001\002\000\042\003\124\007" +
    "\177\040\023\044\037\047\027\050\042\051\006\052\021" +
    "\053\007\055\041\056\031\057\040\061\013\062\024\067" +
    "\012\070\030\001\002\000\004\067\200\001\002\000\004" +
    "\005\201\001\002\000\022\005\052\034\054\035\050\036" +
    "\045\037\046\040\053\041\047\042\055\001\002\000\036" +
    "\006\203\020\070\021\062\022\064\023\066\024\065\025" +
    "\067\026\072\027\061\030\060\031\071\032\057\033\073" +
    "\043\063\001\002\000\004\004\204\001\002\000\046\002" +
    "\uffd8\003\uffd8\007\uffd8\040\uffd8\044\uffd8\047\uffd8\050\uffd8" +
    "\051\uffd8\052\uffd8\053\uffd8\055\uffd8\056\uffd8\057\uffd8\061" +
    "\uffd8\062\uffd8\065\uffd8\067\uffd8\070\uffd8\001\002\000\004" +
    "\040\206\001\002\000\004\006\207\001\002\000\004\010" +
    "\210\001\002\000\006\063\211\064\213\001\002\000\022" +
    "\005\052\034\054\035\050\036\045\037\046\040\053\041" +
    "\047\042\055\001\002\000\004\007\221\001\002\000\004" +
    "\016\214\001\002\000\036\040\023\044\037\047\027\050" +
    "\042\051\006\052\021\053\007\055\041\056\031\057\040" +
    "\061\013\062\024\067\012\070\030\001\002\000\042\003" +
    "\124\040\023\044\037\047\027\050\042\051\006\052\021" +
    "\053\007\055\041\056\031\057\040\061\013\062\024\065" +
    "\216\067\012\070\030\001\002\000\004\004\220\001\002" +
    "\000\004\007\uffdc\001\002\000\010\007\uffdb\063\uffdb\064" +
    "\uffdb\001\002\000\046\002\uffdf\003\uffdf\007\uffdf\040\uffdf" +
    "\044\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\055" +
    "\uffdf\056\uffdf\057\uffdf\061\uffdf\062\uffdf\065\uffdf\067\uffdf" +
    "\070\uffdf\001\002\000\036\016\223\020\070\021\062\022" +
    "\064\023\066\024\065\025\067\026\072\027\061\030\060" +
    "\031\071\032\057\033\073\043\063\001\002\000\036\040" +
    "\023\044\037\047\027\050\042\051\006\052\021\053\007" +
    "\055\041\056\031\057\040\061\013\062\024\067\012\070" +
    "\030\001\002\000\042\003\124\040\023\044\037\047\027" +
    "\050\042\051\006\052\021\053\007\055\041\056\031\057" +
    "\040\061\013\062\024\065\216\067\012\070\030\001\002" +
    "\000\010\007\uffdd\063\211\064\213\001\002\000\004\007" +
    "\uffde\001\002\000\004\020\235\001\002\000\022\005\052" +
    "\034\054\035\050\036\045\037\046\040\053\041\047\042" +
    "\055\001\002\000\004\021\232\001\002\000\050\002\uffcf" +
    "\003\uffcf\006\uffcf\007\uffcf\040\uffcf\044\uffcf\047\uffcf\050" +
    "\uffcf\051\uffcf\052\uffcf\053\uffcf\055\uffcf\056\uffcf\057\uffcf" +
    "\061\uffcf\062\uffcf\065\uffcf\067\uffcf\070\uffcf\001\002\000" +
    "\036\004\234\020\070\021\062\022\064\023\066\024\065" +
    "\025\067\026\072\027\061\030\060\031\071\032\057\033" +
    "\073\043\063\001\002\000\064\002\uffd5\003\uffd5\005\uffd5" +
    "\007\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\044\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5" +
    "\053\uffd5\055\uffd5\056\uffd5\057\uffd5\061\uffd5\062\uffd5\065" +
    "\uffd5\067\uffd5\070\uffd5\001\002\000\050\002\uffd0\003\uffd0" +
    "\006\uffd0\007\uffd0\040\uffd0\044\uffd0\047\uffd0\050\uffd0\051" +
    "\uffd0\052\uffd0\053\uffd0\055\uffd0\056\uffd0\057\uffd0\061\uffd0" +
    "\062\uffd0\065\uffd0\067\uffd0\070\uffd0\001\002\000\006\004" +
    "\251\013\250\001\002\000\004\011\240\001\002\000\004" +
    "\040\241\001\002\000\004\013\242\001\002\000\004\010" +
    "\243\001\002\000\022\005\052\034\054\035\050\036\045" +
    "\037\046\040\053\041\047\042\055\001\002\000\004\004" +
    "\245\001\002\000\064\002\uffd3\003\uffd3\005\uffd3\007\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\044\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3" +
    "\055\uffd3\056\uffd3\057\uffd3\061\uffd3\062\uffd3\065\uffd3\067" +
    "\uffd3\070\uffd3\001\002\000\006\007\247\015\171\001\002" +
    "\000\004\004\uffce\001\002\000\022\005\052\034\054\035" +
    "\050\036\045\037\046\040\053\041\047\042\055\001\002" +
    "\000\064\002\uffd4\003\uffd4\005\uffd4\007\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\044\uffd4" +
    "\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\055\uffd4\056" +
    "\uffd4\057\uffd4\061\uffd4\062\uffd4\065\uffd4\067\uffd4\070\uffd4" +
    "\001\002\000\036\004\253\020\070\021\062\022\064\023" +
    "\066\024\065\025\067\026\072\027\061\030\060\031\071" +
    "\032\057\033\073\043\063\001\002\000\064\002\uffd6\003" +
    "\uffd6\005\uffd6\007\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\044\uffd6\047\uffd6\050\uffd6\051" +
    "\uffd6\052\uffd6\053\uffd6\055\uffd6\056\uffd6\057\uffd6\061\uffd6" +
    "\062\uffd6\065\uffd6\067\uffd6\070\uffd6\001\002\000\004\002" +
    "\001\001\002\000\016\040\256\047\027\050\042\051\006" +
    "\052\021\053\007\001\002\000\004\013\230\001\002\000" +
    "\022\005\052\034\054\035\050\036\045\037\046\040\053" +
    "\041\047\042\055\001\002\000\036\004\261\020\070\021" +
    "\062\022\064\023\066\024\065\025\067\026\072\027\061" +
    "\030\060\031\071\032\057\033\073\043\063\001\002\000" +
    "\004\040\262\001\002\000\006\020\227\021\231\001\002" +
    "\000\004\006\264\001\002\000\004\010\265\001\002\000" +
    "\036\040\023\044\037\047\027\050\042\051\006\052\021" +
    "\053\007\055\041\056\031\057\040\061\013\062\024\067" +
    "\012\070\030\001\002\000\042\003\124\007\267\040\023" +
    "\044\037\047\027\050\042\051\006\052\021\053\007\055" +
    "\041\056\031\057\040\061\013\062\024\067\012\070\030" +
    "\001\002\000\046\002\uffe0\003\uffe0\007\uffe0\040\uffe0\044" +
    "\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\055\uffe0" +
    "\056\uffe0\057\uffe0\061\uffe0\062\uffe0\065\uffe0\067\uffe0\070" +
    "\uffe0\001\002\000\022\005\052\034\054\035\050\036\045" +
    "\037\046\040\053\041\047\042\055\001\002\000\036\006" +
    "\272\020\070\021\062\022\064\023\066\024\065\025\067" +
    "\026\072\027\061\030\060\031\071\032\057\033\073\043" +
    "\063\001\002\000\004\010\273\001\002\000\036\040\023" +
    "\044\037\047\027\050\042\051\006\052\021\053\007\055" +
    "\041\056\031\057\040\061\013\062\024\067\012\070\030" +
    "\001\002\000\042\003\124\007\275\040\023\044\037\047" +
    "\027\050\042\051\006\052\021\053\007\055\041\056\031" +
    "\057\040\061\013\062\024\067\012\070\030\001\002\000" +
    "\046\002\uffd9\003\uffd9\007\uffd9\040\uffd9\044\uffd9\047\uffd9" +
    "\050\uffd9\051\uffd9\052\uffd9\053\uffd9\055\uffd9\056\uffd9\057" +
    "\uffd9\061\uffd9\062\uffd9\065\uffd9\067\uffd9\070\uffd9\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\046\002\013\003\035\004\007\005\024\006" +
    "\003\007\031\013\014\014\015\015\025\016\032\017\004" +
    "\020\034\021\033\023\016\027\010\030\042\031\017\034" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\005\122\006\003\007" +
    "\031\013\014\014\015\015\025\016\032\017\004\020\034" +
    "\021\033\023\016\027\010\030\042\031\017\034\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\110\001\001" +
    "\000\002\001\001\000\004\033\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\107\001\001\000\004" +
    "\033\106\001\001\000\004\033\105\001\001\000\004\033" +
    "\104\001\001\000\004\033\103\001\001\000\004\033\102" +
    "\001\001\000\004\033\101\001\001\000\004\033\100\001" +
    "\001\000\004\033\077\001\001\000\004\033\076\001\001" +
    "\000\004\033\075\001\001\000\004\033\074\001\001\000" +
    "\004\033\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\004\120" +
    "\005\024\006\003\007\031\013\014\014\015\015\025\016" +
    "\032\017\004\020\034\021\033\023\016\027\010\030\042" +
    "\031\017\034\021\001\001\000\040\005\122\006\003\007" +
    "\031\013\014\014\015\015\025\016\032\017\004\020\034" +
    "\021\033\023\016\027\010\030\042\031\017\034\021\001" +
    "\001\000\004\022\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\004\130\005\024\006\003\007\031\013\014" +
    "\014\015\015\025\016\032\017\004\020\034\021\033\023" +
    "\016\027\010\030\042\031\017\034\021\001\001\000\040" +
    "\005\122\006\003\007\031\013\014\014\015\015\025\016" +
    "\032\017\004\020\034\021\033\023\016\027\010\030\042" +
    "\031\017\034\021\001\001\000\002\001\001\000\004\033" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\004\136\005\024\006\003\007\031\013\014\014\015\015" +
    "\025\016\032\017\004\020\034\021\033\023\016\027\010" +
    "\030\042\031\017\034\021\001\001\000\040\005\122\006" +
    "\003\007\031\013\014\014\015\015\025\016\032\017\004" +
    "\020\034\021\033\023\016\027\010\030\042\031\017\034" +
    "\021\001\001\000\004\022\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\032\145\034\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\153\001\001\000\002\001\001\000\042\004\151\005" +
    "\024\006\003\007\031\013\014\014\015\015\025\016\032" +
    "\017\004\020\034\021\033\023\016\027\010\030\042\031" +
    "\017\034\021\001\001\000\040\005\122\006\003\007\031" +
    "\013\014\014\015\015\025\016\032\017\004\020\034\021" +
    "\033\023\016\027\010\030\042\031\017\034\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\004\156\005\024\006\003\007\031\013\014\014\015" +
    "\015\025\016\032\017\004\020\034\021\033\023\016\027" +
    "\010\030\042\031\017\034\021\001\001\000\040\005\122" +
    "\006\003\007\031\013\014\014\015\015\025\016\032\017" +
    "\004\020\034\021\033\023\016\027\010\030\042\031\017" +
    "\034\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\165\036\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\033\165\036\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\004\175\005\024\006\003\007\031\013\014\014\015" +
    "\015\025\016\032\017\004\020\034\021\033\023\016\027" +
    "\010\030\042\031\017\034\021\001\001\000\040\005\122" +
    "\006\003\007\031\013\014\014\015\015\025\016\032\017" +
    "\004\020\034\021\033\023\016\027\010\030\042\031\017" +
    "\034\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\211\001\001\000\004\033\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\004" +
    "\214\005\024\006\003\007\031\013\014\014\015\015\025" +
    "\016\032\017\004\020\034\021\033\023\016\027\010\030" +
    "\042\031\017\034\021\001\001\000\042\005\122\006\003" +
    "\007\031\013\014\014\015\015\025\016\032\017\004\020" +
    "\034\021\033\023\016\026\216\027\010\030\042\031\017" +
    "\034\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\004\223\005\024\006\003\007\031\013\014\014\015\015" +
    "\025\016\032\017\004\020\034\021\033\023\016\027\010" +
    "\030\042\031\017\034\021\001\001\000\042\005\122\006" +
    "\003\007\031\013\014\014\015\015\025\016\032\017\004" +
    "\020\034\021\033\023\016\026\224\027\010\030\042\031" +
    "\017\034\021\001\001\000\004\024\225\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\232\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\243" +
    "\001\001\000\006\033\165\036\245\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\251\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\256" +
    "\034\021\001\001\000\002\001\001\000\004\033\257\001" +
    "\001\000\002\001\001\000\010\014\262\015\025\016\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\004\265\005\024\006\003\007\031\013\014" +
    "\014\015\015\025\016\032\017\004\020\034\021\033\023" +
    "\016\027\010\030\042\031\017\034\021\001\001\000\040" +
    "\005\122\006\003\007\031\013\014\014\015\015\025\016" +
    "\032\017\004\020\034\021\033\023\016\027\010\030\042" +
    "\031\017\034\021\001\001\000\002\001\001\000\004\033" +
    "\270\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\004\273\005\024\006\003\007\031\013\014\014\015\015" +
    "\025\016\032\017\004\020\034\021\033\023\016\027\010" +
    "\030\042\031\017\034\021\001\001\000\040\005\122\006" +
    "\003\007\031\013\014\014\015\015\025\016\032\017\004" +
    "\020\034\021\033\023\016\027\010\030\042\031\017\034" +
    "\021\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Clases, objetos, variables, lista, etc... en sintaxis java    
    //Creo una lista de tipo String llamada 'salidas', donde guardare cada uno de las salidas analizadas
    //Para el proyecto se sugiere HashMap
    public List<String> salidas = new ArrayList<String>();
    public List<Simbolo> simbolos = new ArrayList<Simbolo>();

    public Map<String, Double> mapaDouble = new HashMap<>();    
    public Map<String, String> mapaString = new HashMap<>();

    public String graph;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= entradas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // entradas ::= sentencias 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST e = new AST("entrada") ; 
                e.hijos = ((List<AST>) a) ;  
                System.out.println(e.hijos.size());
                e.imprimirInfo(); graph= e.infoGraphviz(0); System.out.println(graph); //funcion para graficar arbol
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entradas",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<AST> sentencias = (List<AST>)a ; 
                                            sentencias.add((AST)b); 
                                        RESULT=sentencias; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencias ::= sentencia 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		List<AST> inicial = new ArrayList<AST>(); 
                        inicial.add((AST)a);
                        RESULT = inicial;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencias ::= sentencias error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // metodo ::= PR_VOID ID PARIZQ lista_constructor PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 simbolos.add(new Simbolo(a, "Metodo", "void","-", aleft, aright));
            AST metodo = new AST (a); metodo.hijos.add( (AST)b); metodo.hijos.addAll((List<AST>) c) ;  
        RESULT=metodo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // metodo ::= PR_VOID ID PARIZQ PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 simbolos.add(new Simbolo(a, "Metodo", "void", "-", aleft, aright));
        AST metodo = new AST (a); metodo.hijos.addAll((List<AST>) c) ;  
        RESULT=metodo;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_constructor ::= lista_constructor COMA tipo_dato ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<AST> lista = (List<AST>)a; lista.add(new AST(b+" "+c)); 
                    AST variables = new AST("variabels entrada"); variables.hijos = lista; RESULT=variables; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_constructor",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_constructor ::= tipo_dato ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=List.of(a+" "+b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_constructor",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ejecutar ::= PR_EJECUTAR sentencia_llamar_metodo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= "ejecutar " +a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejecutar",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia_llamar_metodo ::= ID PARIZQ PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT= a + "();";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_llamar_metodo",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia_llamar_metodo ::= ID PARIZQ elementos PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT= a + "("+b+") \n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_llamar_metodo",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // elementos_double ::= valor_double 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos_double",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // elementos_double ::= elementos_double COMA elementos_double 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+","+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos_double",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // valor_double ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // valor_double ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=mapaDouble.get(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= sentencia_print 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= sentencia_declaracion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= a ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= actualizacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= sentenciaIf 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new AST("si");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= sentenciaFor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= sentenciaSwitch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= sentenciaWhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= sentenciaDoWhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new AST((String)a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= sentencia_llamar_metodo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new AST((String)a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= metodo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= a ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= ejecutar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new AST((String)a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentenciaIf ::= PR_SI PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 AST si = new AST("si"); AST exp = new AST("expresion"); exp.hijos.add((AST)a); si.hijos.add(exp) ;
                        AST sen = new AST("sentencias"); sen.hijos = (List<AST>)b; si.hijos.add(sen); 
                        RESULT=si; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentenciaIf ::= PR_SI PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER sentenciaElse 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST si = new AST("si"); AST exp = new AST("expresion"); exp.hijos.add((AST)a); si.hijos.add(exp) ;
                        AST sen = new AST("sentencias"); sen.hijos = (List<AST>)b; si.hijos.add(sen); 
                        RESULT=si; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentenciaElse ::= PR_SINO PR_SI PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 RESULT="\n elif "+ a +":{\n"  + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaElse",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentenciaElse ::= PR_SINO PR_SI PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER sentenciaElse 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT="\nelif "+ a +":{\n"  + "\n}"+c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaElse",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentenciaElse ::= PR_SINO LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		 RESULT="else :{\n" + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaElse",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentenciaFor ::= PR_PARA PARIZQ sentencia_declaracion expresion PTCOMA actualizacion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 AST para = new AST("para"); para.hijos.add((AST) a);  AST cond = new AST("condicion"); cond.hijos.add((AST) b);  //System.out.println("para declaracion bien" );
                para.hijos.add((AST) c);
                AST sentencias =  new AST("sentencias"); sentencias.hijos = ((List<AST>) d); para.hijos.add(sentencias); 
                RESULT=para; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaFor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentenciaSwitch ::= PR_SELECT PARIZQ ID PARDER LLAVIZQ sentenciasCase LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 AST select = new AST("selector"); select.hijos.add(new AST(a));
    AST casos = new AST("casos"); casos.hijos = (List<AST>)b; select.hijos.add(casos);
    RESULT=select; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitch",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentenciasCase ::= PR_CASO expresion DOSPUNTOS sentencias usoBreak sentenciasCase 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST caso = new AST("caso"); caso.hijos.add((AST)a);  AST exps = new AST("sentencias"); exps.hijos = ((List<AST>) b); caso.hijos.add(exps);
                        List<AST> casos = new ArrayList<>(); casos.add(caso); System.out.println(casos.size());
                        casos.addAll((List<AST>)c);  
                        casos.add(caso);  RESULT=casos ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasCase",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentenciasCase ::= PR_CASO expresion DOSPUNTOS sentencias usoBreak 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 AST caso = new AST("caso"); caso.hijos.add((AST)a);  AST exps = new AST("sentencias"); exps.hijos = ((List<AST>) b); caso.hijos.add(exps);
                        List<AST> salidas = List.of(caso); System.out.println("CASO con dato: "+salidas.get(0).dato); RESULT = salidas;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasCase",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentenciasCase ::= PR_PDEFECT DOSPUNTOS sentencias usoBreak 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 AST pdefect = new AST("pordefecto"); AST exps = new AST("sentencias"); exps.hijos = ((List<AST>) b); pdefect.hijos.add(exps);
                        List<AST> salidas = List.of(pdefect); System.out.println("PORDECETE con dato: "+salidas.get(0).hijos.get(0).dato); RESULT = salidas;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasCase",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // usoBreak ::= PR_CORTAR PTCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("usoBreak",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentenciasExtra ::= ID IGUAL expresion PTCOMA sentencias 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT=a+"=" + b+ ";\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasExtra",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentenciaWhile ::= PR_MIENTRAS PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 AST mientras = new AST("mientras"); AST condicion = new AST("condicion"); condicion.hijos.add((AST)a); mientras.hijos.add(condicion);
            AST sentencias = new AST("sentencias"); sentencias.hijos = (List<AST>)b; mientras.hijos.add(condicion);
        RESULT=mientras; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentenciaDoWhile ::= PR_HACER LLAVIZQ sentencias LLAVDER PR_MIENTRAS PARIZQ expresion PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT="while True:{" +"if ("+"):{ \n break \n}"+"\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia_print ::= PR_IMPRI PARIZQ expresion PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
       System.out.println("Debo retornar esto POR CONSOLA: (" + ((AST)a).dato +");" ); AST impri = new AST("imprimir()"); impri.hijos.add((AST)a);
       //Inserto en la lista de salidas de la expresión evaluada
       //salidas.add("print(" + a + ")");
       RESULT=impri;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_print",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia_declaracion ::= tipo_dato ID IGUAL expresion PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 simbolos.add(new Simbolo(b, "Variable", (String) a, "global" , aleft, aright)); 
                                    AST declara = new AST("declaracion"); declara.hijos.add(new AST((String)a)); 
                                    declara.hijos.add(new AST(b)); declara.hijos.add((AST)c);
                                    RESULT=declara ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_declaracion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia_declaracion ::= ID IGUAL expresion PTCOMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=b+" = "+c+";\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_declaracion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia_declaracion ::= tipo_dato ID PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=a+" "+b+";";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_declaracion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia_declaracion ::= tipo_dato CORIZQ CORDER ID IGUAL lista PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= a +" [] "+b+ " = " +c+ ";" ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_declaracion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // actualizacion ::= incremento 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actualizacion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // actualizacion ::= decremento 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actualizacion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // incremento ::= ID MAS MAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		AST incremento = new AST("incremento"); incremento.hijos.add(new AST((String)a)); 
                incremento.hijos.add(new AST("+")); incremento.hijos.add(new AST("+"));
                RESULT=incremento ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // decremento ::= ID MENOS MENOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		AST decremento = new AST("declaracion"); decremento.hijos.add(new AST((String)a)); 
                decremento.hijos.add(new AST("-")); decremento.hijos.add(new AST("-"));
                RESULT=decremento ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decremento",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lista ::= LLAVIZQ elementos LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="[" +a+ "]";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // elementos ::= expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // elementos ::= elementos COMA elementos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= ""+a + "," + b+"";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo_dato ::= PR_ENTERO 
            {
              Object RESULT =null;
		RESULT="entero";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipo_dato ::= PR_DOBLE 
            {
              Object RESULT =null;
		RESULT="doble";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipo_dato ::= PR_CADENA 
            {
              Object RESULT =null;
		RESULT="cadena";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tipo_dato ::= PR_BIN 
            {
              Object RESULT =null;
		RESULT="binario";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tipo_dato ::= PR_CHAR 
            {
              Object RESULT =null;
		RESULT="char";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= expresion MAS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST mas = new AST("+"); mas.hijos.add((AST)a); mas.hijos.add((AST)b); RESULT = mas; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= expresion POR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST por = new AST("*"); por.hijos.add((AST)a); por.hijos.add((AST)b); RESULT = por; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= expresion MENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST men = new AST("-"); men.hijos.add((AST)a); men.hijos.add((AST)b); RESULT = men; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= expresion POTENCIA expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST pot = new AST("^"); pot.hijos.add((AST)a); pot.hijos.add((AST)b); RESULT = pot; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= expresion DIVIDIDO expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST div = new AST("/"); div.hijos.add((AST)a); div.hijos.add((AST)b); RESULT = div; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= expresion MAYORQUE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST may = new AST(">"); may.hijos.add((AST)a); may.hijos.add((AST)b); RESULT = may; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= expresion MENORQUE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST men = new AST("<"); men.hijos.add((AST)a); men.hijos.add((AST)b); RESULT = men; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= expresion MAYOROIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST mayi = new AST(">="); mayi.hijos.add((AST)a); mayi.hijos.add((AST)b); RESULT = mayi; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= expresion MENOROIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST meni = new AST("<="); meni.hijos.add((AST)a); meni.hijos.add((AST)b); RESULT = meni; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= expresion EQUALS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST eq = new AST("=="); eq.hijos.add((AST)a); eq.hijos.add((AST)b); RESULT = eq; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= expresion DISTINTO expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST dis = new AST("!="); dis.hijos.add((AST)a); dis.hijos.add((AST)b); RESULT = dis; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= expresion AND expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST and = new AST("&&"); and.hijos.add((AST)a); and.hijos.add((AST)b); RESULT = and; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= expresion OR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST or = new AST("||"); or.hijos.add((AST)a); or.hijos.add((AST)b); RESULT = or; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= NOT expresion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 AST not = new AST("!"); not.hijos.add((AST)b); RESULT = not; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new AST("("+a+")");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new AST(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new AST(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new AST(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= STR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new AST(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= CHAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= BOOLEANO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
