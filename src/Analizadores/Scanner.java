/* The following code was generated by JFlex 1.7.0 */



/* 1. Package e importaciones */
package Analizadores;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/Analizadores/Scanner.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 19, 52, 52,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     5, 50, 16,  0, 43,  0, 51, 18, 34, 35, 46, 44, 41, 45,  3, 20, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 42, 33, 48, 40, 49,  0, 
     0, 12, 31, 25, 30, 10, 11,  6, 26, 22, 32,  6, 13, 27, 23, 28, 
    24,  6,  8, 15,  7,  9, 29,  6,  6,  6,  6, 38, 17, 39, 47,  6, 
     0, 12, 31, 25, 30, 10, 11,  6, 26, 22, 32,  6, 13, 27, 23, 28, 
    24,  6,  8, 15,  7,  9, 29,  6,  6,  6,  6, 37,  4, 36,  0,  0, 
     0,  0,  0,  0,  0, 52,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\4\5\1\1"+
    "\1\5\2\1\1\6\1\7\1\1\10\5\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\1\1\0\1\32\4\5\1\0\1\33\1\5\1\33"+
    "\3\0\1\34\1\0\7\5\1\0\3\5\1\0\1\5"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\4\5\2\0"+
    "\2\5\2\43\1\44\3\0\4\5\1\0\5\5\1\0"+
    "\1\5\1\0\1\5\1\0\2\5\1\0\1\5\1\45"+
    "\2\5\2\0\1\46\1\5\1\46\3\0\1\5\1\47"+
    "\2\5\2\50\3\5\1\0\2\5\2\51\1\0\1\5"+
    "\2\52\1\5\1\0\3\5\1\45\1\0\1\5\3\0"+
    "\5\5\1\0\1\5\1\0\1\5\1\53\1\0\1\5"+
    "\1\54\1\0\1\5\1\55\1\5\1\0\1\5\3\0"+
    "\3\5\1\56\1\57\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\0\1\5\3\0\3\5\1\0"+
    "\1\5\2\60\1\0\1\5\2\61\1\62\2\63\2\0"+
    "\2\64\1\5\1\65\1\0\1\5\2\66\2\0\1\5"+
    "\2\67\2\0\1\70\12\0\1\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\65\0\324\0\u0109\0\u013e"+
    "\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\65\0\u02b1"+
    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459"+
    "\0\u048e\0\65\0\65\0\65\0\65\0\65\0\65\0\65"+
    "\0\u04c3\0\65\0\65\0\65\0\65\0\65\0\65\0\65"+
    "\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\65\0\u0601\0\u0636"+
    "\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de"+
    "\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986"+
    "\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e"+
    "\0\65\0\65\0\65\0\65\0\65\0\u05cc\0\u0b63\0\u0b98"+
    "\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\65\0\u07a9"+
    "\0\65\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49"+
    "\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1"+
    "\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u0109"+
    "\0\u1199\0\u11ce\0\u1203\0\u1238\0\65\0\u126d\0\u0109\0\u12a2"+
    "\0\u12d7\0\u130c\0\u1341\0\u0109\0\u1376\0\u13ab\0\65\0\u0109"+
    "\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\65\0\u0109"+
    "\0\u151e\0\u1553\0\65\0\u0109\0\u1588\0\u15bd\0\u15f2\0\u1627"+
    "\0\u165c\0\65\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a"+
    "\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942"+
    "\0\u0109\0\u1977\0\u19ac\0\u0109\0\u19e1\0\u1a16\0\u0109\0\u1a4b"+
    "\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3"+
    "\0\u0109\0\u0109\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31"+
    "\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9"+
    "\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\65\0\u0109\0\u2017"+
    "\0\u204c\0\65\0\u0109\0\u0109\0\65\0\u0109\0\u2081\0\u20b6"+
    "\0\65\0\u0109\0\u20eb\0\u0109\0\u2120\0\u2155\0\65\0\u0109"+
    "\0\u218a\0\u21bf\0\u21f4\0\65\0\u0109\0\u2229\0\u225e\0\u0109"+
    "\0\u2293\0\u22c8\0\u22fd\0\u2332\0\u2367\0\u239c\0\u23d1\0\u2406"+
    "\0\u243b\0\u2470\0\65";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\3\1\7\1\10"+
    "\2\7\1\11\1\12\2\7\1\13\1\14\1\15\1\2"+
    "\1\16\1\17\1\20\1\21\1\22\1\7\1\23\1\24"+
    "\1\25\1\26\1\7\1\27\1\30\1\31\1\7\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\67\0\1\3\3\0\1\3\61\0\1\4"+
    "\1\55\65\0\1\56\62\0\1\7\3\0\10\7\1\0"+
    "\1\7\6\0\13\7\26\0\1\7\3\0\2\7\1\57"+
    "\5\7\1\0\1\7\6\0\13\7\26\0\1\7\3\0"+
    "\10\7\1\0\1\7\6\0\1\7\1\60\10\7\1\61"+
    "\26\0\1\7\3\0\6\7\1\62\1\7\1\0\1\7"+
    "\6\0\13\7\36\0\1\63\12\0\2\64\40\0\1\7"+
    "\3\0\4\7\1\65\3\7\1\0\1\7\5\0\1\64"+
    "\1\66\12\7\24\0\20\67\1\0\1\70\43\67\22\71"+
    "\1\0\42\71\24\0\1\72\73\0\1\73\33\0\1\7"+
    "\3\0\10\7\1\0\1\7\6\0\5\7\1\74\5\7"+
    "\26\0\1\7\3\0\6\7\1\75\1\7\1\0\1\7"+
    "\6\0\6\7\1\76\4\7\26\0\1\7\3\0\6\7"+
    "\1\77\1\7\1\0\1\7\6\0\6\7\1\100\4\7"+
    "\26\0\1\7\3\0\6\7\1\101\1\7\1\0\1\7"+
    "\6\0\13\7\26\0\1\7\3\0\6\7\1\102\1\7"+
    "\1\0\1\7\5\0\1\103\1\104\12\7\26\0\1\7"+
    "\3\0\10\7\1\0\1\7\6\0\6\7\1\105\4\7"+
    "\26\0\1\7\3\0\10\7\1\0\1\7\6\0\6\7"+
    "\1\106\4\7\26\0\1\7\3\0\10\7\1\0\1\7"+
    "\5\0\1\107\1\110\12\7\74\0\1\111\64\0\1\112"+
    "\64\0\1\113\64\0\1\114\77\0\1\115\3\0\1\116"+
    "\1\0\2\116\61\0\1\7\3\0\3\7\1\117\4\7"+
    "\1\0\1\7\6\0\13\7\26\0\1\7\3\0\1\7"+
    "\1\120\6\7\1\0\1\7\6\0\13\7\26\0\1\7"+
    "\3\0\4\7\1\121\3\7\1\0\1\7\6\0\13\7"+
    "\26\0\1\7\3\0\7\7\1\122\1\0\1\7\6\0"+
    "\13\7\41\0\1\123\76\0\1\124\37\0\1\7\3\0"+
    "\7\7\1\125\1\0\1\7\6\0\13\7\26\0\1\7"+
    "\3\0\10\7\1\0\1\7\6\0\1\7\1\126\11\7"+
    "\24\0\20\67\1\127\1\70\63\67\1\130\1\70\43\67"+
    "\22\0\1\131\57\0\1\132\7\0\2\133\66\0\1\134"+
    "\36\0\1\7\3\0\10\7\1\0\1\7\6\0\2\7"+
    "\1\135\10\7\26\0\1\7\3\0\2\7\1\136\5\7"+
    "\1\0\1\7\6\0\13\7\26\0\1\7\3\0\2\7"+
    "\1\137\5\7\1\0\1\7\6\0\13\7\26\0\1\7"+
    "\3\0\2\7\1\140\5\7\1\141\1\142\6\0\10\7"+
    "\1\143\2\7\26\0\1\7\3\0\2\7\1\144\5\7"+
    "\1\0\1\7\6\0\1\7\1\145\11\7\26\0\1\7"+
    "\3\0\10\7\1\0\1\7\6\0\3\7\1\146\7\7"+
    "\26\0\1\7\3\0\10\7\1\0\1\7\5\0\1\147"+
    "\1\150\12\7\36\0\1\151\54\0\1\7\3\0\4\7"+
    "\1\152\3\7\1\0\1\7\6\0\13\7\26\0\1\7"+
    "\3\0\10\7\1\0\1\7\5\0\1\153\1\154\12\7"+
    "\26\0\1\7\3\0\10\7\1\0\1\7\6\0\11\7"+
    "\1\155\1\7\53\0\1\156\37\0\1\7\3\0\10\7"+
    "\1\0\1\7\6\0\1\7\1\157\11\7\26\0\1\7"+
    "\3\0\4\7\1\160\3\7\1\0\1\7\6\0\13\7"+
    "\26\0\1\7\3\0\4\7\1\161\3\7\1\0\1\7"+
    "\6\0\13\7\26\0\1\7\3\0\10\7\1\0\1\7"+
    "\6\0\3\7\1\162\7\7\26\0\1\7\3\0\10\7"+
    "\1\163\1\117\6\0\13\7\36\0\1\164\106\0\1\165"+
    "\32\0\1\7\3\0\4\7\1\166\3\7\1\0\1\7"+
    "\6\0\13\7\26\0\1\7\3\0\10\7\1\0\1\7"+
    "\6\0\6\7\1\167\4\7\51\0\2\170\65\0\1\171"+
    "\45\0\1\172\56\0\1\7\3\0\2\7\1\173\5\7"+
    "\1\0\1\7\6\0\13\7\26\0\1\7\3\0\6\7"+
    "\1\174\1\7\1\0\1\7\6\0\13\7\26\0\1\7"+
    "\3\0\10\7\1\0\1\7\6\0\10\7\1\175\2\7"+
    "\26\0\1\7\3\0\6\7\1\176\1\7\1\0\1\7"+
    "\6\0\13\7\60\0\1\177\32\0\1\7\3\0\10\7"+
    "\1\0\1\7\6\0\6\7\1\200\4\7\26\0\1\7"+
    "\3\0\4\7\1\201\3\7\1\0\1\7\6\0\13\7"+
    "\26\0\1\7\3\0\1\7\1\202\6\7\1\0\1\7"+
    "\6\0\13\7\26\0\1\7\3\0\1\7\1\203\6\7"+
    "\1\204\1\205\6\0\13\7\26\0\1\7\3\0\4\7"+
    "\1\206\3\7\1\0\1\7\6\0\13\7\53\0\1\207"+
    "\37\0\1\7\3\0\10\7\1\0\1\7\6\0\1\7"+
    "\1\210\11\7\53\0\1\211\37\0\1\7\3\0\10\7"+
    "\1\0\1\7\6\0\1\7\1\212\11\7\62\0\1\213"+
    "\30\0\1\7\3\0\10\7\1\0\1\7\6\0\10\7"+
    "\1\214\2\7\26\0\1\7\3\0\7\7\1\215\1\0"+
    "\1\7\6\0\13\7\40\0\1\216\52\0\1\7\3\0"+
    "\6\7\1\217\1\7\1\0\1\7\6\0\13\7\26\0"+
    "\1\7\3\0\2\7\1\220\5\7\1\0\1\7\6\0"+
    "\13\7\26\0\1\7\3\0\3\7\1\221\4\7\1\0"+
    "\1\7\6\0\13\7\36\0\1\222\103\0\1\223\35\0"+
    "\1\7\3\0\10\7\1\0\1\7\6\0\3\7\1\224"+
    "\7\7\53\0\1\225\65\0\1\226\61\0\2\227\40\0"+
    "\1\7\3\0\10\7\1\0\1\7\5\0\1\227\1\230"+
    "\12\7\26\0\1\7\3\0\4\7\1\231\3\7\1\0"+
    "\1\7\6\0\13\7\26\0\1\7\3\0\10\7\1\0"+
    "\1\7\6\0\3\7\1\232\7\7\26\0\1\7\3\0"+
    "\10\7\1\0\1\7\6\0\1\7\1\233\11\7\26\0"+
    "\1\7\3\0\6\7\1\234\1\7\1\0\1\7\6\0"+
    "\13\7\26\0\1\7\3\0\10\7\1\0\1\7\5\0"+
    "\1\235\1\236\12\7\60\0\1\237\32\0\1\7\3\0"+
    "\10\7\1\0\1\7\6\0\6\7\1\240\4\7\26\0"+
    "\1\7\3\0\2\7\1\241\5\7\1\0\1\7\6\0"+
    "\13\7\33\0\1\242\57\0\1\7\3\0\1\7\1\243"+
    "\6\7\1\0\1\7\6\0\13\7\26\0\1\7\3\0"+
    "\4\7\1\244\3\7\1\0\1\7\6\0\13\7\34\0"+
    "\1\245\56\0\1\7\3\0\2\7\1\246\5\7\1\0"+
    "\1\7\6\0\13\7\26\0\1\7\3\0\10\7\1\0"+
    "\1\7\6\0\6\7\1\247\4\7\26\0\1\7\3\0"+
    "\1\7\1\250\6\7\1\0\1\7\6\0\13\7\33\0"+
    "\1\251\57\0\1\7\3\0\1\7\1\252\6\7\1\0"+
    "\1\7\6\0\13\7\36\0\1\253\63\0\1\254\106\0"+
    "\1\255\33\0\1\7\3\0\10\7\1\0\1\7\6\0"+
    "\5\7\1\256\5\7\26\0\1\7\3\0\5\7\1\257"+
    "\2\7\1\0\1\7\6\0\13\7\26\0\1\7\3\0"+
    "\1\7\1\260\6\7\1\0\1\7\6\0\13\7\26\0"+
    "\1\7\3\0\6\7\1\261\1\7\1\0\1\7\6\0"+
    "\13\7\26\0\1\7\3\0\2\7\1\262\5\7\1\0"+
    "\1\7\6\0\13\7\53\0\1\263\37\0\1\7\3\0"+
    "\10\7\1\0\1\7\6\0\1\7\1\264\11\7\41\0"+
    "\1\265\51\0\1\7\3\0\7\7\1\266\1\0\1\7"+
    "\6\0\13\7\34\0\1\267\56\0\1\7\3\0\2\7"+
    "\1\270\5\7\1\0\1\7\6\0\13\7\51\0\2\271"+
    "\40\0\1\7\3\0\10\7\1\0\1\7\5\0\1\271"+
    "\1\272\12\7\26\0\1\7\3\0\6\7\1\273\1\7"+
    "\1\0\1\7\6\0\13\7\60\0\1\274\32\0\1\7"+
    "\3\0\10\7\1\0\1\7\6\0\6\7\1\275\4\7"+
    "\33\0\1\276\64\0\1\277\102\0\2\300\40\0\1\7"+
    "\3\0\10\7\1\0\1\7\5\0\1\300\1\301\12\7"+
    "\26\0\1\7\3\0\4\7\1\302\3\7\1\0\1\7"+
    "\6\0\13\7\26\0\1\7\3\0\4\7\1\303\3\7"+
    "\1\0\1\7\6\0\13\7\35\0\1\304\55\0\1\7"+
    "\3\0\3\7\1\305\4\7\1\0\1\7\6\0\13\7"+
    "\36\0\1\306\54\0\1\7\3\0\4\7\1\307\3\7"+
    "\1\0\1\7\6\0\13\7\40\0\1\310\52\0\1\7"+
    "\3\0\6\7\1\311\1\7\1\0\1\7\6\0\13\7"+
    "\60\0\1\312\32\0\1\7\3\0\10\7\1\0\1\7"+
    "\6\0\6\7\1\313\4\7\26\0\1\7\3\0\2\7"+
    "\1\314\5\7\1\0\1\7\6\0\13\7\34\0\1\315"+
    "\56\0\1\7\3\0\2\7\1\316\5\7\1\0\1\7"+
    "\6\0\13\7\36\0\1\317\103\0\1\320\43\0\1\321"+
    "\56\0\1\7\3\0\2\7\1\322\5\7\1\0\1\7"+
    "\6\0\13\7\26\0\1\7\3\0\10\7\1\0\1\7"+
    "\6\0\3\7\1\323\7\7\26\0\1\7\3\0\2\7"+
    "\1\324\5\7\1\0\1\7\6\0\13\7\40\0\1\325"+
    "\52\0\1\7\3\0\6\7\1\326\1\7\1\0\1\7"+
    "\6\0\13\7\42\0\2\327\47\0\1\7\3\0\10\7"+
    "\1\327\1\330\6\0\13\7\34\0\1\331\106\0\1\332"+
    "\34\0\1\7\3\0\1\7\1\333\6\7\1\0\1\7"+
    "\6\0\13\7\34\0\1\334\56\0\1\7\3\0\2\7"+
    "\1\335\5\7\1\0\1\7\6\0\13\7\57\0\1\336"+
    "\45\0\1\337\52\0\1\7\3\0\10\7\1\0\1\7"+
    "\6\0\6\7\1\340\4\7\51\0\2\341\46\0\1\342"+
    "\103\0\1\343\51\0\1\344\64\0\1\345\101\0\1\346"+
    "\42\0\1\347\64\0\1\350\111\0\1\351\42\0\1\352"+
    "\62\0\1\353\64\0\1\72\54\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9381];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\11\1\1\11\12\1\7\11"+
    "\1\1\7\11\4\1\1\0\1\11\4\1\1\0\3\1"+
    "\3\0\1\1\1\0\7\1\1\0\3\1\1\0\1\1"+
    "\5\11\5\1\2\0\2\1\1\11\1\1\1\11\3\0"+
    "\4\1\1\0\5\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\1\0\4\1\2\0\1\11\2\1\3\0\4\1"+
    "\1\11\4\1\1\0\2\1\1\11\1\1\1\0\1\1"+
    "\1\11\2\1\1\0\3\1\1\11\1\0\1\1\3\0"+
    "\5\1\1\0\1\1\1\0\2\1\1\0\2\1\1\0"+
    "\3\1\1\0\1\1\3\0\5\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\0\1\1\3\0"+
    "\3\1\1\0\1\1\1\11\1\1\1\0\1\1\1\11"+
    "\2\1\1\11\1\1\2\0\1\11\3\1\1\0\1\1"+
    "\1\11\1\1\2\0\1\1\1\11\1\1\2\0\1\1"+
    "\12\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Codigo de usuario en sintaxis java
    //Agregar clases, variables, arreglos, objetos etc...
    public class Lexema{        
            public String lexema;
            public String token;
            public int fila;
            public int columna;


            public Lexema(String lexema, String token, int fila, int columna){
            this.lexema = lexema;
            this.token = token;
            this.fila = fila;
            this.columna = columna;
        }
    }

    public List<Lexema> lexemas = new ArrayList<Lexema>();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
      yyline = 1; 
    yychar = 1; 
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { //Aqui se debe guardar los valores (yytext(), yyline, yychar ) para posteriormente generar el reporte de errores Léxicos.
    System.out.println("Este es un error lexico: "+yytext()+ ", en la linea: "+yyline+", en la columna: "+yychar);
            } 
            // fall through
          case 57: break;
          case 2: 
            { 
            } 
            // fall through
          case 58: break;
          case 3: 
            { System.out.println("Reconocio entero: "+yytext()); 
    //lexemas.add( new Lexema(yytext(),"Número Entero",yyline,yychar));
    return new Symbol(sym.ENTERO,yyline,yychar, yytext());
            } 
            // fall through
          case 59: break;
          case 4: 
            { System.out.println("Reconocio "+yytext()+" punto"); 
    //lexemas.add( new Lexema(".","Punto",yyline,yychar));
    return new Symbol(sym.PUNTO,yyline,yychar,yytext());
            } 
            // fall through
          case 60: break;
          case 5: 
            { System.out.println("Reconocio ID: "+yytext());    
    //lexemas.add( new Lexema(yytext(),"ID",yyline,yychar));
    return new Symbol(sym.ID,yyline,yychar, yytext());
            } 
            // fall through
          case 61: break;
          case 6: 
            { yychar=1;
            } 
            // fall through
          case 62: break;
          case 7: 
            { //lexemas.add( new Lexema("/","Operador Division",yyline,yychar));
    return new Symbol(sym.DIVIDIDO,yyline,yychar,yytext());
            } 
            // fall through
          case 63: break;
          case 8: 
            { System.out.println("Reconocio "+yytext()+" punto y coma"); 
    //lexemas.add( new Lexema(";"," punto y coma",yyline,yychar));
    return new Symbol(sym.PTCOMA,yyline,yychar,yytext());
            } 
            // fall through
          case 64: break;
          case 9: 
            { System.out.println("Reconocio "+yytext()+" parentesis abre"); 
    //lexemas.add( new Lexema("(","Abre parentesis",yyline,yychar));    
    return new Symbol(sym.PARIZQ,yyline,yychar,yytext());
            } 
            // fall through
          case 65: break;
          case 10: 
            { System.out.println("Reconocio "+yytext()+" parentesis cierra"); 
    //lexemas.add( new Lexema(")","Cierra parentesis",yyline,yychar));
    return new Symbol(sym.PARDER,yyline,yychar,yytext());
            } 
            // fall through
          case 66: break;
          case 11: 
            { System.out.println("Reconocio "+yytext()+" llave cierra"); 
    //lexemas.add( new Lexema("}","Abre llave",yyline,yychar));
    return new Symbol(sym.LLAVDER,yyline,yychar,yytext());
            } 
            // fall through
          case 67: break;
          case 12: 
            { System.out.println("Reconocio "+yytext()+" llave abre"); 
    //lexemas.add( new Lexema("{","Cierra llave",yyline,yychar));
    return new Symbol(sym.LLAVIZQ,yyline,yychar,yytext());
            } 
            // fall through
          case 68: break;
          case 13: 
            { System.out.println("Reconocio "+yytext()+" parentesis abre"); 
    //lexemas.add( new Lexema("(","Abre corchetes",yyline,yychar));    
    return new Symbol(sym.CORIZQ,yyline,yychar,yytext());
            } 
            // fall through
          case 69: break;
          case 14: 
            { System.out.println("Reconocio "+yytext()+" parentesis cierra"); 
    //lexemas.add( new Lexema(")","Cierra corchetes",yyline,yychar));
    return new Symbol(sym.CORDER,yyline,yychar,yytext());
            } 
            // fall through
          case 70: break;
          case 15: 
            { System.out.println("Reconocio "+yytext()+" igual"); 
    //lexemas.add( new Lexema("=","Igual",yyline,yychar));
    return new Symbol(sym.IGUAL,yyline,yychar,yytext());
            } 
            // fall through
          case 71: break;
          case 16: 
            { System.out.println("Reconocio "+yytext()+" coma"); 
    //lexemas.add( new Lexema(yytext(),"Coma",yyline,yychar));
    return new Symbol(sym.COMA,yyline,yychar,yytext());
            } 
            // fall through
          case 72: break;
          case 17: 
            { System.out.println("Reconocio "+yytext()); 
    //lexemas.add( new Lexema(yytext(),"Dos Puntos",yyline,yychar));
    return new Symbol(sym.DOSPUNTOS,yyline,yychar,yytext());
            } 
            // fall through
          case 73: break;
          case 18: 
            { System.out.println("Reconocio "+yytext()); 
    //lexemas.add( new Lexema(yytext(),"Simbolo monetario",yyline,yychar));
    return new Symbol(sym.DOLLAR,yyline,yychar,yytext());
            } 
            // fall through
          case 74: break;
          case 19: 
            { //lexemas.add( new Lexema("+","Operador Más",yyline,yychar));
    return new Symbol(sym.MAS,yyline,yychar,yytext());
            } 
            // fall through
          case 75: break;
          case 20: 
            { //lexemas.add( new Lexema("-","Operador Menos",yyline,yychar));
    return new Symbol(sym.MENOS,yyline,yychar,yytext());
            } 
            // fall through
          case 76: break;
          case 21: 
            { //lexemas.add( new Lexema("*","Operador Multiplicador",yyline,yychar));
    return new Symbol(sym.POR,yyline,yychar,yytext());
            } 
            // fall through
          case 77: break;
          case 22: 
            { //lexemas.add( new Lexema("^","Operador Potencia",yyline,yychar));
    return new Symbol(sym.POTENCIA,yyline,yychar,yytext());
            } 
            // fall through
          case 78: break;
          case 23: 
            { //lexemas.add( new Lexema(yytext(),"Operador Menorque",yyline,yychar));
    return new Symbol(sym.MENORQUE,yyline,yychar,yytext());
            } 
            // fall through
          case 79: break;
          case 24: 
            { //lexemas.add( new Lexema(yytext(),"Operador Mayorque",yyline,yychar));
    return new Symbol(sym.MAYORQUE,yyline,yychar,yytext());
            } 
            // fall through
          case 80: break;
          case 25: 
            { //lexemas.add( new Lexema(yytext(),"Operador Not",yyline,yychar));
    return new Symbol(sym.NOT,yyline,yychar,yytext());
            } 
            // fall through
          case 81: break;
          case 26: 
            { //lexemas.add( new Lexema(yytext(),"Operador Or",yyline,yychar));
    return new Symbol(sym.OR,yyline,yychar,yytext());
            } 
            // fall through
          case 82: break;
          case 27: 
            { System.out.println("Reconocio PR: "+yytext()); 
    //lexemas.add( new Lexema(yytext(),"Palabra Reservada",yyline,yychar));
    return new Symbol(sym.PR_SI,yyline,yychar,yytext());
            } 
            // fall through
          case 83: break;
          case 28: 
            { System.out.println("Comentario: "+yytext());
            } 
            // fall through
          case 84: break;
          case 29: 
            { //lexemas.add( new Lexema(yytext(),"Operador Igual Que",yyline,yychar));
    return new Symbol(sym.EQUALS,yyline,yychar,yytext());
            } 
            // fall through
          case 85: break;
          case 30: 
            { //lexemas.add( new Lexema(yytext(),"Operador Mayor O Igual Que",yyline,yychar));
    return new Symbol(sym.MENOROIGUAL,yyline,yychar,yytext());
            } 
            // fall through
          case 86: break;
          case 31: 
            { //lexemas.add( new Lexema(yytext(),"Operador Mayor O Igual Que",yyline,yychar));
    return new Symbol(sym.MAYOROIGUAL,yyline,yychar,yytext());
            } 
            // fall through
          case 87: break;
          case 32: 
            { //lexemas.add( new Lexema(yytext(),"Operador Distinto Que",yyline,yychar));
    return new Symbol(sym.DISTINTO,yyline,yychar,yytext());
            } 
            // fall through
          case 88: break;
          case 33: 
            { //lexemas.add( new Lexema(yytext(),"Operador And",yyline,yychar));
    return new Symbol(sym.AND,yyline,yychar,yytext());
            } 
            // fall through
          case 89: break;
          case 34: 
            { //lexemas.add( new Lexema(yytext(),"Numero Decimal",yyline,yychar));
    return new Symbol(sym.DECIMAL,yyline,yychar, yytext());
            } 
            // fall through
          case 90: break;
          case 35: 
            { System.out.println("Reconocio cadena: "+yytext());
    //lexemas.add( new Lexema(yytext(),"Cadena de caracteres",yyline,yychar));
    return new Symbol(sym.STR,yyline,yychar, yytext());
            } 
            // fall through
          case 91: break;
          case 36: 
            { //lexemas.add( new Lexema(yytext(),"Caracter",yyline,yychar));
    return new Symbol(sym.CHAR,yyline,yychar, yytext());
            } 
            // fall through
          case 92: break;
          case 37: 
            { System.out.println("Reconocio BOOL: "+yytext());  
    //lexemas.add( new Lexema(yytext(),"Boolean",yyline,yychar));
    return new Symbol(sym.BOOLEANO,yyline,yychar, yytext());
            } 
            // fall through
          case 93: break;
          case 38: 
            { System.out.println("Reconocio PR: "+yytext()); 
    //lexemas.add( new Lexema(yytext(),"Palabra Reservada",yyline,yychar));
    return new Symbol(sym.PR_SINO,yyline,yychar,yytext());
            } 
            // fall through
          case 94: break;
          case 39: 
            { System.out.println("Reconocio PR: "+yytext()); 
    //lexemas.add( new Lexema(yytext(),"Palabra Reservada",yyline,yychar));
    return new Symbol(sym.PR_PARA,yyline,yychar,yytext());
            } 
            // fall through
          case 95: break;
          case 40: 
            { System.out.println("Reconocio PR: "+yytext()); 
    //lexemas.add( new Lexema(yytext(),"Palabra Reservada",yyline,yychar));
    return new Symbol(sym.PR_CASO,yyline,yychar,yytext());
            } 
            // fall through
          case 96: break;
          case 41: 
            { System.out.println("Reconocio PR: "+yytext()); 
    //lexemas.add( new Lexema("main","Palabra Reservada",yyline,yychar));
    return new Symbol(sym.PR_MAIN,yyline,yychar,yytext());
            } 
            // fall through
          case 97: break;
          case 42: 
            { System.out.println("Reconocio PR: "+yytext()); 
    //lexemas.add( new Lexema(yytext(),"Palabra Reservada",yyline,yychar));
    return new Symbol(sym.PR_VOID,yyline,yychar,yytext());
            } 
            // fall through
          case 98: break;
          case 43: 
            { System.out.println("Reconocio PR: "+yytext()); 
    //lexemas.add( new Lexema(yytext(),"Palabra Reservada",yyline,yychar));
    return new Symbol(sym.PR_HACER,yyline,yychar,yytext());
            } 
            // fall through
          case 99: break;
          case 44: 
            { System.out.println("Reconocio PR: "+yytext()); 
    //lexemas.add( new Lexema("doble","Palabra Reservada",yyline,yychar));
    return new Symbol(sym.PR_DOBLE,yyline,yychar,yytext());
            } 
            // fall through
          case 100: break;
          case 45: 
            { System.out.println("Reconocio PR: "+yytext()); 
    //lexemas.add( new Lexema("entero","Palabra Reservada",yyline,yychar));
    return new Symbol(sym.PR_ENTERO,yyline,yychar,yytext());
            } 
            // fall through
          case 101: break;
          case 46: 
            { System.out.println("Reconocio PR: "+yytext()); 
    //lexemas.add( new Lexema("cadena","Palabra Reservada",yyline,yychar));
    return new Symbol(sym.PR_CADENA,yyline,yychar,yytext());
            } 
            // fall through
          case 102: break;
          case 47: 
            { System.out.println("Reconocio PR: "+yytext()); 
    //lexemas.add( new Lexema(yytext(),"Palabra Reservada",yyline,yychar));
    return new Symbol(sym.PR_CORTAR,yyline,yychar,yytext());
            } 
            // fall through
          case 103: break;
          case 48: 
            { System.out.println("Reconocio PR: "+yytext()); 
    //lexemas.add( new Lexema("console","Palabra Reservada",yyline,yychar));
    return new Symbol(sym.PR_CONSOLE,yyline,yychar,yytext());
            } 
            // fall through
          case 104: break;
          case 49: 
            { System.out.println("Reconocio PR: "+yytext()); 
    //lexemas.add( new Lexema("binario","Palabra Reservada",yyline,yychar));
    return new Symbol(sym.PR_BIN,yyline,yychar,yytext());
            } 
            // fall through
          case 105: break;
          case 50: 
            { System.out.println("Reconocio PR: "+yytext()); 
    //lexemas.add( new Lexema(yytext(),"Palabra Reservada",yyline,yychar));
    return new Symbol(sym.PR_EJECUTAR,yyline,yychar,yytext());
            } 
            // fall through
          case 106: break;
          case 51: 
            { System.out.println("Reconocio PR: "+yytext()); 
    //lexemas.add( new Lexema(yytext(),"Palabra Reservada",yyline,yychar));
    return new Symbol(sym.PR_SELECT,yyline,yychar,yytext());
            } 
            // fall through
          case 107: break;
          case 52: 
            { System.out.println("Reconocio PR: "+yytext()); 
    //lexemas.add( new Lexema(yytext(),"Palabra Reservada",yyline,yychar));
    return new Symbol(sym.PR_IMPRI,yyline,yychar,yytext());
            } 
            // fall through
          case 108: break;
          case 53: 
            { System.out.println("Reconocio PR: "+yytext()); 
    //lexemas.add( new Lexema("caracter","Palabra Reservada",yyline,yychar));
    return new Symbol(sym.PR_CHAR,yyline,yychar,yytext());
            } 
            // fall through
          case 109: break;
          case 54: 
            { System.out.println("Reconocio PR: "+yytext()); 
    //lexemas.add( new Lexema(yytext(),"Palabra Reservada",yyline,yychar));
    return new Symbol(sym.PR_MIENTRAS,yyline,yychar,yytext());
            } 
            // fall through
          case 110: break;
          case 55: 
            { System.out.println("Reconocio PR: "+yytext()); 
    //lexemas.add( new Lexema(yytext(),"Palabra Reservada",yyline,yychar));
    return new Symbol(sym.PR_CONTINUAR,yyline,yychar,yytext());
            } 
            // fall through
          case 111: break;
          case 56: 
            { System.out.println("Reconocio PR: "+yytext());
    //lexemas.add( new Lexema(yytext(),"Palabra Reservada",yyline,yychar));
    return new Symbol(sym.PR_PDEFECT,yyline,yychar,yytext());
            } 
            // fall through
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
