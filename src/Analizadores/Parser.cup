/* 1. Package e importaciones */
package Analizadores; 
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import Estructuras.Simbolo;
import Estructuras.AST;

// 2. Codigo para el parser, variables, metodos 
parser code 
{:
    //Clases, objetos, variables, lista, etc... en sintaxis java    
    //Creo una lista de tipo String llamada 'salidas', donde guardare cada uno de las salidas analizadas
    //Para el proyecto se sugiere HashMap
    public List<String> salidas = new ArrayList<String>();
    public List<Simbolo> simbolos = new ArrayList<Simbolo>();

    public Map<String, Double> mapaDouble = new HashMap<>();    
    public Map<String, String> mapaString = new HashMap<>();



:} 

// 3. Terminales 
terminal String PTCOMA,PARIZQ,PARDER,LLAVDER,LLAVIZQ,CORDER,CORIZQ,IGUAL,PUNTO,COMA, DOSPUNTOS, DOLLAR;
terminal String MAS,MENOS,POR,DIVIDIDO;
terminal String MENORQUE,MAYORQUE,EQUALS,MAYOROIGUAL,MENOROIGUAL,DISTINTO;
terminal String AND,OR,NOT;
terminal String ENTERO;
terminal String DECIMAL;
terminal String BOOLEANO;
terminal String ID;
terminal String STR,CHAR;
terminal String POTENCIA;
terminal String PR_VOID;
terminal String PR_MAIN,PR_DGLOBALES ;
terminal String PR_ENTERO;
terminal String PR_CADENA, PR_CHAR;
terminal String PR_DOBLE; 
terminal String PR_BIN; 
terminal String PR_CONSOLE;
terminal String PR_IMPRI;
terminal String PR_EJECUTAR;
terminal String PR_SI, PR_SINO, PR_PARA, PR_SELECT, PR_CASO, PR_PDEFECT, PR_CORTAR, PR_CONTINUAR,PR_MIENTRAS, PR_HACER;

// 4. No Terminales
non terminal ini, entradas;
non terminal sentencias, sentencia;
non terminal metodo, ejecutar;
non terminal valor_string, valor_double;
non terminal elementos_double;
non terminal sentencia_print;
non terminal sentencia_declaracion,sentencia_llamar_metodo;
non terminal sentenciaIf, sentenciaElse, sentenciaSwitch, sentenciasCase,sentenciasExtra,usoBreak;
non terminal sentenciaFor, sentenciaDoWhile, sentenciaWhile;
non terminal expresion;
non terminal tipo_dato;
non terminal lista;
non terminal elementos;
non terminal miembro;

// 5. Precedencias
precedence nonassoc POTENCIA;
precedence left MAS,MENOS,COMA;
precedence left POR,DIVIDIDO;
precedence left  MENORQUE,MAYORQUE,EQUALS,MAYOROIGUAL,MENOROIGUAL,DISTINTO;
precedence left AND,OR;
precedence right NOT; 


// 6. Producciones
start with ini; 
ini::= entradas
;

entradas ::= sentencias:a 
            {: AST e = new AST("entrada") ; 
                e.hijos = ((List<AST>) a) ;  
                System.out.println(e.hijos.size());
                e.imprimirInfo(); //funcion para graficar arbol:}
            
;

sentencias ::= sentencias:a sentencia:b {: List<AST> sentencias = (List<AST>)a ; 
                                            sentencias.add((AST)b); 
                                        RESULT=sentencias; :}
              | sentencia:a  {:List<AST> inicial = new ArrayList<AST>(); 
                        inicial.add((AST)a);
                        RESULT = inicial;
                        //System.out.println("--------: ()");
                    :}
              |sentencias:a error:b     {:RESULT= null;:}
; 

metodo ::= PR_VOID ID:a PARIZQ elementos:b PARDER LLAVIZQ sentencias LLAVDER 
        {: simbolos.add(new Simbolo(a, "Metodo", "void","-", aleft, aright));
        RESULT="Funcion "+ a +"("+b+"):{"+"}"; :}

             |PR_VOID ID:a PARIZQ PARDER LLAVIZQ sentencias LLAVDER 
        {: simbolos.add(new Simbolo(a, "Metodo", "void", "-", aleft, aright));
        RESULT="Funcion "+ a +"():{"+"}";  :}
;

ejecutar ::= PR_EJECUTAR sentencia_llamar_metodo:a {:RESULT= "ejecutar " +a + "\n";:}
; 

sentencia_llamar_metodo ::= ID:a PARIZQ PARDER PTCOMA {:RESULT= a + "();\n";:}
                | ID:a PARIZQ elementos:b PARDER PTCOMA {:RESULT= a + "("+b+") \n";:}
; 

elementos_double ::= valor_double:a {: RESULT = a;  :}
        | elementos_double:a COMA elementos_double :b {:RESULT=a+","+b;:}
;

valor_double ::= DECIMAL:a {:RESULT=a;:}
                | ID:a {:RESULT=mapaDouble.get(a);:}
;


sentencia ::= sentencia_print:a     {:RESULT=new AST((String)a);:}
            |sentencia_declaracion:a     {:RESULT=new AST((String)a);:}

            | sentenciaIf:a   {:RESULT=new AST((String)a);:}
            | sentenciaFor:a  {:RESULT=new AST((String)a);:}
            | sentenciaSwitch:a  {:RESULT=new AST((String)a);:}
            | sentenciaWhile:a   {:RESULT=new AST((String)a);:}
            | sentenciaDoWhile:a   {:RESULT=new AST((String)a);:}
            | sentencia_llamar_metodo:a   {:RESULT=new AST((String)a);:}

            | metodo:a     {:RESULT=new AST((String)a);:}
            | ejecutar:a     {:RESULT=new AST((String)a);:}
            //| expresion:a     {:RESULT=new AST((String)a);:}
;

sentenciaIf ::= PR_SI PARIZQ expresion:a PARDER LLAVIZQ sentencias LLAVDER {: RESULT="if "+ a +":{\n"  + "\n}"; :}
                |PR_SI PARIZQ expresion:a PARDER LLAVIZQ sentencias LLAVDER sentenciaElse:c {: RESULT="if "+ a +":{\n"  + "\n}"+c; :}
;

sentenciaElse ::= PR_SINO PR_SI PARIZQ expresion:a PARDER LLAVIZQ sentencias LLAVDER  {: RESULT="\n elif "+ a +":{\n"  + "\n}"; :}
                |PR_SINO PR_SI PARIZQ expresion:a PARDER LLAVIZQ sentencias LLAVDER  sentenciaElse:c {: RESULT="\nelif "+ a +":{\n"  + "\n}"+c; :}
                |PR_SINO LLAVIZQ sentencias LLAVDER  {: RESULT="else :{\n" + "\n}"; :}
;

sentenciaFor ::= PR_PARA PARIZQ tipo_dato ID IGUAL expresion PTCOMA ID:a MENORQUE ENTERO:b PTCOMA ID MAS MAS PARDER LLAVIZQ sentencias LLAVDER 
{: RESULT="for "+ a +" in range(1,"+b+"):{\n"+"\n}"; :}
                |PR_PARA PARIZQ tipo_dato ID IGUAL expresion PTCOMA ID:a MENOROIGUAL ENTERO:b PTCOMA ID MAS MAS PARDER LLAVIZQ sentencias LLAVDER 
                {: RESULT="for "+ a +" in range(1,"+b+"):{\n"+"\n}"; :}
;

sentenciaSwitch ::= PR_SELECT PARIZQ ID:a PARDER LLAVIZQ sentenciasCase:b LLAVDER  
{: RESULT="def switch(case, "+ a +"):{\n" + "switcher = { " + b + "\n} }"; :}
;

sentenciasCase ::= PR_CASO expresion:a DOSPUNTOS sentencias usoBreak  sentenciasCase:c {: RESULT= a+": " +  ", \n " + c; :}
                | PR_CASO expresion:a DOSPUNTOS sentencias usoBreak {: RESULT= a+": " +  ", \n "; :}
                | PR_PDEFECT DOSPUNTOS sentencias usoBreak {: RESULT="4: " +  ","; :}
;
usoBreak ::=  PR_CORTAR PTCOMA
;

sentenciasExtra ::= ID:a IGUAL expresion:b PTCOMA sentencias {: RESULT=a+"=" + b+ ";\n"; :}
;

sentenciaWhile ::= PR_MIENTRAS PARIZQ expresion:a PARDER LLAVIZQ sentencias LLAVDER {: RESULT="while "+ a +":{\n"  + "\n}"; :}
;

sentenciaDoWhile ::= PR_HACER LLAVIZQ sentencias LLAVDER PR_MIENTRAS PARIZQ expresion:a PARDER PTCOMA
    {: RESULT="while True:{" +"if ("+"):{ \n break \n}"+"\n}"; :}
;


sentencia_print ::= PR_IMPRI PARIZQ expresion:a PARDER PTCOMA
    {:
       System.out.println("Debo retornar esto POR CONSOLA: (" + a +");" );
       //Inserto en la lista de salidas de la expresiÃ³n evaluada
       //salidas.add("print(" + a + ")");
       RESULT="print(" + a + ");";
    :}
;

sentencia_declaracion ::= tipo_dato:a ID:b IGUAL expresion:c PTCOMA 
                                {: simbolos.add(new Simbolo(b, "Variable", (String) a, "global" , aleft, aright)); RESULT=a+" "+b.toString()+" = "+c+";\n" ;:}
                        |ID:b IGUAL expresion:c PTCOMA {:RESULT=b+" = "+c+";\n";:}
                        |tipo_dato:a ID:b PTCOMA    {:RESULT=a+" "+b+";";:}
                        |tipo_dato:a CORIZQ CORDER ID:b IGUAL lista:c PTCOMA {:RESULT= a +" [] "+b+ " = " +c+ ";" ;:}
;


lista ::= LLAVIZQ elementos:a LLAVDER {:RESULT="[" +a+ "]";:}
;

elementos ::= expresion:a   {:RESULT=a;:}
            | elementos:a COMA elementos:b {:RESULT= ""+a + "," + b+"";:}
;

tipo_dato ::= PR_ENTERO    {:RESULT="entero";:}
            |PR_DOBLE  {:RESULT="doble";:}
            |PR_CADENA {:RESULT="cadena";:}
            |PR_BIN    {:RESULT="binario";:}
            |PR_CHAR    {:RESULT="char";:}
;

expresion ::= expresion:a MAS expresion:b {: RESULT = a + " + " + b; :}
            | expresion:a POR expresion:b {: RESULT = a + " * " + b; :}
            | expresion:a MENOS expresion:b {: RESULT = a + " - " + b; :}
            | expresion:a POTENCIA expresion:b {: RESULT = a + " - " + b; :}
            | expresion:a DIVIDIDO expresion:b {: RESULT = a + " / " + b; :}

            | expresion:a MAYORQUE expresion:b {: RESULT = a + " > " + b; :}
            | expresion:a MENORQUE expresion:b {: RESULT = a + " < " + b; :}
            | expresion:a MAYOROIGUAL expresion:b {: RESULT = a + " >= " + b; :}
            | expresion:a MENOROIGUAL expresion:b {: RESULT = a + " <= " + b; :}
            | expresion:a EQUALS expresion:b {: RESULT = a + " == " + b; :}
            | expresion:a DISTINTO expresion:b {: RESULT = a + " != " + b; :}

            | expresion:a AND expresion:b {: RESULT = a + " and " + b; :}
            | expresion:a OR expresion:b {: RESULT = a + " or " + b; :}
            | NOT expresion:b {: RESULT = " not " + b; :}

            | PARIZQ expresion:a PARDER {:RESULT="("+a+")";:} 
            | ENTERO:a {: RESULT=a; :}
            | DECIMAL:a {:RESULT=a;:}
            | ID:a {:RESULT=a;:}
            | STR:a {:RESULT=a.toString();:}
            | CHAR:a {:RESULT=a;:}
            | BOOLEANO:a {:RESULT=a;:}
;

/*

| f:a {:RESULT=a;:}
f ::= ENTERO:a {:RESULT=a;:}
     |DECIMAL:a {:RESULT=a;:}
     
     |BOOLEANO:a {:RESULT=a;:}
;*/